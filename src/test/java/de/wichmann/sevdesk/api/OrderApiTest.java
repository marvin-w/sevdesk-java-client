/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.ApiException;
import de.wichmann.sevdesk.model.ModelDiscounts;
import de.wichmann.sevdesk.model.ModelEmail;
import de.wichmann.sevdesk.model.ModelOrder;
import de.wichmann.sevdesk.model.ModelOrderPos;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Ignore
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Create a new order
     *
     * Calls Order.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderTest() throws ApiException {
        ModelOrder response = api.addOrder();

        // TODO: test validations
    }
    /**
     * Copy an existing order
     *
     * Calls copy() in Order.php to copy an existing order.    The new orders origin is the copied order, and its version is the copied orders version increased by one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyOrderTest() throws ApiException {
        Integer id = null;
        ModelOrder response = api.copyOrder(id);

        // TODO: test validations
    }
    /**
     * Delete an existing order
     *
     * Calls the delete() function in Order.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderTest() throws ApiException {
        Integer id = null;
        api.deleteOrder(id);

        // TODO: test validations
    }
    /**
     * Duplicate an existing order
     *
     * Calls duplicate() in Order.php to duplicate an existing order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateOrderTest() throws ApiException {
        Integer id = null;
        ModelOrder response = api.duplicateOrder(id);

        // TODO: test validations
    }
    /**
     * Get the next order number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNextOrderNumberTest() throws ApiException {
        String orderType = null;
        Boolean useNextNumber = null;
        api.getNextOrderNumber(orderType, useNextNumber);

        // TODO: test validations
    }
    /**
     * Get all order discounts
     *
     * Calls getDiscounts() in Order.php to get the discounts of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderDiscountsTest() throws ApiException {
        Integer id = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelDiscounts response = api.getOrderDiscounts(id, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get an overview of all orders
     *
     * Calls Order.php to get necessary variables. However, not all variables get their value from Order.php directly but from other models like Model_OrderPos
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelOrder response = api.getOrders(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Update status of an existing order
     *
     * Calls changeStatus() in Order.php to update the specified orders status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderChangeStatusTest() throws ApiException {
        Integer id = null;
        ModelOrder response = api.orderChangeStatus(id);

        // TODO: test validations
    }
    /**
     * Get sum charged already, total net, gross and tax amount and tax rate
     *
     * Calls getChargeableInformation() in Order.php to get the sum charged already, total net, gross and tax amount and tax rate of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetChargeableInformationTest() throws ApiException {
        Integer id = null;
        api.orderGetChargeableInformation(id);

        // TODO: test validations
    }
    /**
     * Get total net, gross and tax amount of order
     *
     * Calls getChargeableSums() in Order.php to get the total net, gross and tax amount of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetChargeableSumsTest() throws ApiException {
        Integer id = null;
        api.orderGetChargeableSums(id);

        // TODO: test validations
    }
    /**
     * Get main order by checking if there are existing order logs of the specified order
     *
     * Calls getMainOrderByLogs() in Order.php to get main order by checking if there are existing order logs of the specified order.    If the specified order is not the main order (eg. if there are no existing logs), this will return null!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetMainOrderByLogsTest() throws ApiException {
        Integer id = null;
        ModelOrder response = api.orderGetMainOrderByLogs(id);

        // TODO: test validations
    }
    /**
     * Get the order as a pdf
     *
     * Calls getPdf() in Order.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetPdfTest() throws ApiException {
        Integer id = null;
        Boolean preventSendBy = null;
        api.orderGetPdf(id, preventSendBy);

        // TODO: test validations
    }
    /**
     * Get all order positions
     *
     * Calls getPositions() in Order.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetPositionsTest() throws ApiException {
        Integer id = null;
        Boolean withOptional = null;
        Boolean onlyChargeable = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelOrderPos response = api.orderGetPositions(id, withOptional, onlyChargeable, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get related objects of a specified order
     *
     * Calls getRelatedObjects() in Order.php to get related objects of the order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetRelatedObjectsTest() throws ApiException {
        Integer id = null;
        Boolean includeItself = null;
        Boolean sortByType = null;
        List<String> embed = null;
        api.orderGetRelatedObjects(id, includeItself, sortByType, embed);

        // TODO: test validations
    }
    /**
     * Get tags of the specified order
     *
     * Calls getTags() in Order.php to get the tags of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTagsTest() throws ApiException {
        Integer id = null;
        List<String> embed = null;
        api.orderGetTags(id, embed);

        // TODO: test validations
    }
    /**
     * Get sum tax of the specified order
     *
     * Calls getTax() in Order.php to get the sum tax of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTaxTest() throws ApiException {
        Integer id = null;
        Boolean foreignCurrency = null;
        api.orderGetTax(id, foreignCurrency);

        // TODO: test validations
    }
    /**
     * Get tax groups of the specified order
     *
     * Calls getTaxGroupes() in Order.php to get the tax groups of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTaxGroupesTest() throws ApiException {
        Integer id = null;
        api.orderGetTaxGroupes(id);

        // TODO: test validations
    }
    /**
     * Get sum gross of the specified order
     *
     * Calls getTotal() in Order.php to get the sum gross of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTotalTest() throws ApiException {
        Integer id = null;
        Boolean foreignCurrency = null;
        api.orderGetTotal(id, foreignCurrency);

        // TODO: test validations
    }
    /**
     * Get total gross amount of order
     *
     * Calls getTotalCalc() in Order.php to get the total gross amount of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTotalCalcTest() throws ApiException {
        Integer id = null;
        api.orderGetTotalCalc(id);

        // TODO: test validations
    }
    /**
     * Get total net amount of order
     *
     * Calls getTotalNet() in Order.php to get the total net amount of the specified order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTotalNetTest() throws ApiException {
        Integer id = null;
        api.orderGetTotalNet(id);

        // TODO: test validations
    }
    /**
     * Render the order document on doc server and return the metadata
     *
     * Calls render() in Order.php to render an order document on doc server and return the metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderRenderTest() throws ApiException {
        Integer id = null;
        api.orderRender(id);

        // TODO: test validations
    }
    /**
     * Send an order by the desired send type
     *
     * Calls sendBy() in Order.php to send the order by the desired send type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderSendByTest() throws ApiException {
        Integer id = null;
        String sendType = null;
        ModelOrder response = api.orderSendBy(id, sendType);

        // TODO: test validations
    }
    /**
     * Send an order via Email
     *
     * Calls sendViaEmail in Order.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendOrderViaEmailTest() throws ApiException {
        Integer id = null;
        ModelEmail response = api.sendOrderViaEmail(id);

        // TODO: test validations
    }
    /**
     * Send an order via post
     *
     * Calls sendViaPost() in Order.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendOrderViaPostTest() throws ApiException {
        Integer id = null;
        ModelOrder response = api.sendOrderViaPost(id);

        // TODO: test validations
    }
    /**
     * Update an existing order
     *
     * Calls Order.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        Integer id = null;
        ModelOrder response = api.updateOrder(id);

        // TODO: test validations
    }
}
