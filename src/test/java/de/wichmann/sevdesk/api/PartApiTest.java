/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.model.ModelInventoryPartLog;
import de.wichmann.sevdesk.model.ModelPart;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartApi
 */
@Ignore
public class PartApiTest {

    private final PartApi api = new PartApi();

    /**
     * Create a new part
     *
     * Calls Part.php to add a part
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPartTest() {
        ModelPart response = api.addPart();

        // TODO: test validations
    }
    /**
     * add / remove parts from the stock
     *
     * Calls book() in Part.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookPartTest() {
        Integer id = null;
        ModelPart response = api.bookPart(id);

        // TODO: test validations
    }
    /**
     * Delete an existing part
     *
     * Calls the delete() function in Part.php. Be aware that you can&#x27;t delete parts which are used somewhere!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePartTest() {
        Integer id = null;
        api.deletePart(id);

        // TODO: test validations
    }
    /**
     * Duplicate an existing part
     *
     * Calls duplicate() in Part.php to duplicate the specified part. Mind that the stock will be zero
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicatePartTest() {
        Integer id = null;
        ModelPart response = api.duplicatePart(id);

        // TODO: test validations
    }
    /**
     * Get an overview of all parts
     *
     * Calls Part.php to get necessary variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartsTest() {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelPart response = api.getParts(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get last log about the part
     *
     * Calls getLastLog() in Part.php to get the last log about the specified part
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partGetLastLogTest() {
        Integer id = null;
        String maxDate = null;
        List<String> embed = null;
        ModelInventoryPartLog response = api.partGetLastLog(id, maxDate, embed);

        // TODO: test validations
    }
    /**
     * Get price of a specified part
     *
     * Calls getPrice() in Part.php to get the price of the specified part
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partGetPriceTest() {
        Integer id = null;
        Integer contactId = null;
        String contactObjectName = null;
        Integer partUnityId = null;
        String partUnityObjectName = null;
        api.partGetPrice(id, contactId, contactObjectName, partUnityId, partUnityObjectName);

        // TODO: test validations
    }
    /**
     * Get stock of the part
     *
     * Calls getStock() in Part.php to get the stock of the specified part
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partGetStockTest() {
        Integer id = null;
        String maxDate = null;
        api.partGetStock(id, maxDate);

        // TODO: test validations
    }
    /**
     * Get stock difference of the part before a specified date
     *
     * Calls getStockBefore() in Part.php to get the stock difference of the specified part before the specified date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partGetStockBeforeTest() {
        Integer id = null;
        String date = null;
        api.partGetStockBefore(id, date);

        // TODO: test validations
    }
    /**
     * Update an existing part
     *
     * Calls PartContactPrice to update a part
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePartTest() {
        Integer id = null;
        ModelPart response = api.updatePart(id);

        // TODO: test validations
    }
}
