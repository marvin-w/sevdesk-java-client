/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.ApiException;
import de.wichmann.sevdesk.model.ModelDocumentFolder;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentFolderApi
 */
@Ignore
public class DocumentFolderApiTest {

    private final DocumentFolderApi api = new DocumentFolderApi();

    /**
     * Create a new document folder
     *
     * Calls DocumentFolder.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDocumentFolderTest() throws ApiException {
        ModelDocumentFolder response = api.addDocumentFolder();

        // TODO: test validations
    }
    /**
     * Delete an existing document folder
     *
     * Calls the delete() function in DocumentFolder.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentFolderTest() throws ApiException {
        Integer id = null;
        api.deleteDocumentFolder(id);

        // TODO: test validations
    }
    /**
     * Delete all objects in the bin
     *
     * Calls the emptyBin() function in DocumentFolder.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emptyBinTest() throws ApiException {
        api.emptyBin();

        // TODO: test validations
    }
    /**
     * Returns children (documents and document folders) as &#x27;nodes&#x27; and count of all children as &#x27;total&#x27;
     *
     * Calls getChildren() in DocumentFolder.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentFolderChildrenTest() throws ApiException {
        Integer id = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelDocumentFolder response = api.getDocumentFolderChildren(id, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get an overview of all documents in a document folder
     *
     * Calls getDocuments() in DocumentFolder.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentFolderDocumentsTest() throws ApiException {
        Integer id = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelDocumentFolder response = api.getDocumentFolderDocuments(id, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get an overview of all folders in a document folder
     *
     * Calls getFolders() in DocumentFolder.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentFolderFoldersTest() throws ApiException {
        Integer id = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelDocumentFolder response = api.getDocumentFolderFolders(id, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get path (all parent folders) of this folder
     *
     * Calls getPath() in DocumentFolder.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentFolderPathTest() throws ApiException {
        Integer id = null;
        ModelDocumentFolder response = api.getDocumentFolderPath(id);

        // TODO: test validations
    }
    /**
     * Get an overview of all document folders
     *
     * Calls DocumentFolder.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentFoldersTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelDocumentFolder response = api.getDocumentFolders(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Trash an existing document folder
     *
     * Calls trash() in DocumentFolder.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trashDocumentFolderTest() throws ApiException {
        Integer id = null;
        api.trashDocumentFolder(id);

        // TODO: test validations
    }
    /**
     * Update an existing document folder
     *
     * Calls DocumentFolder.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentFolderTest() throws ApiException {
        Integer id = null;
        ModelDocumentFolder response = api.updateDocumentFolder(id);

        // TODO: test validations
    }
}
