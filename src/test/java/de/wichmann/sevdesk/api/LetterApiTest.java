/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.model.ModelLetter;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LetterApi
 */
@Ignore
public class LetterApiTest {

    private final LetterApi api = new LetterApi();

    /**
     * Create a new letter
     *
     * Calls Letter.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLetterTest() {
        ModelLetter response = api.addLetter();

        // TODO: test validations
    }
    /**
     * Delete an existing letter
     *
     * Calls the delete() function in Letter.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLetterTest() {
        Integer id = null;
        api.deleteLetter(id);

        // TODO: test validations
    }
    /**
     * Get an overview of all letters
     *
     * Calls Letter.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLettersTest() {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelLetter response = api.getLetters(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get pdf from docserver
     *
     * Calls getPdf() in Letter.php to get the pdf of a specified letter from the docserver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void letterGetPdfTest() {
        Integer id = null;
        api.letterGetPdf(id);

        // TODO: test validations
    }
    /**
     * Render a letter to the docserver and return the metadata
     *
     * Calls render() in Letter.php to render a letter to the docserver and return the metadata.    Note that this does not work for letters created by calling the api directly (eg. over Swagger)!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void letterRenderTest() {
        Integer id = null;
        api.letterRender(id);

        // TODO: test validations
    }
    /**
     * Update parameter sendType
     *
     * Calls sendBy() in Letter.php to update the sendType parameter of the letter and change its status to DELIVERED
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void letterSendByTest() {
        Integer id = null;
        ModelLetter response = api.letterSendBy(id);

        // TODO: test validations
    }
    /**
     * Send a letter via mail
     *
     * Calls sendViaMail() in Letter.php to send a letter via mail.    Note that you can not send a letter created by calling the api directly (eg. over Swagger)!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void letterSendViaMailTest() {
        Integer id = null;
        api.letterSendViaMail(id);

        // TODO: test validations
    }
    /**
     * Send a letter via post
     *
     * Calls sendViaPost() in Letter.php to send a letter via post if enabled in your subscription    Note that you can not send a letter created by calling the api directly (eg. over Swagger)!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void letterSendViaPostTest() {
        Integer id = null;
        api.letterSendViaPost(id);

        // TODO: test validations
    }
    /**
     * Update an existing letter
     *
     * Calls Letter.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLetterTest() {
        Integer id = null;
        ModelLetter response = api.updateLetter(id);

        // TODO: test validations
    }
}
