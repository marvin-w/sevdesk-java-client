/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import java.io.File;
import de.wichmann.sevdesk.model.ModelDocument;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@Ignore
public class DocumentApiTest {

    private final DocumentApi api = new DocumentApi();

    /**
     * Create a new document. Be aware that there wont be a working document with content!
     *
     * Calls Document.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDocumentTest() {
        ModelDocument response = api.addDocument();

        // TODO: test validations
    }
    /**
     * Delete an existing document
     *
     * Calls the delete() function in Document.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentTest() {
        Integer id = null;
        api.deleteDocument(id);

        // TODO: test validations
    }
    /**
     * Download a document
     *
     * Calls download() in Document.php to download a document. Will return base64 content.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDocumentTest() {
        Integer id = null;
        File response = api.downloadDocument(id);

        // TODO: test validations
    }
    /**
     * Upload a file (creating a document)
     *
     * With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.    Basically the Model.php itself still constructs the model however new instances of the model are created trough the Factory.php    So for example when you create a new invoice it wont be saved by a POST request with &#x27;/Invoice?para1&#x3D;&amp;...&#x27; but with the saveInvoice function in Factory.php &#x27;Voucher/Factory/saveInvoice?para1&#x3D;&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void factoryAddDocumentTest() {
        File file = null;
        String object = null;
        String folder = null;
        api.factoryAddDocument(file, object, folder);

        // TODO: test validations
    }
    /**
     * Get an overview of all documents
     *
     * Calls Document.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentsTest() {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelDocument response = api.getDocuments(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Update an existing document. Be aware that you can only update its parameter but not the content of the document itself!
     *
     * Calls Document.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentTest() {
        Integer id = null;
        ModelDocument response = api.updateDocument(id);

        // TODO: test validations
    }
    /**
     * Update an existing documents status to &#x27;TRASHED&#x27;, be aware that this deletes the document
     *
     * Calls trash() in Document.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentStatusToTrashedTest() {
        Integer id = null;
        Object response = api.updateDocumentStatusToTrashed(id);

        // TODO: test validations
    }
}
