/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.ApiException;
import de.wichmann.sevdesk.model.ModelCommunicationWay;
import de.wichmann.sevdesk.model.ModelContact;
import de.wichmann.sevdesk.model.ModelContactAddress;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactApi
 */
@Ignore
public class ContactApiTest {

    private final ContactApi api = new ContactApi();

    /**
     * Add an address
     *
     * Adds an address to the contact by calling addAddress() in Contact.php. Address is defined in ContactAddress.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAddressTest() throws ApiException {
        Integer id = null;
        ModelContactAddress response = api.addAddress(id);

        // TODO: test validations
    }
    /**
     * Create a new contact of type person or company
     *
     * Creating a new contact of type person/company calls a shared path with the same http-verb.  However, both types require certain parameters which will indicate that their type of contact should be created.  So, using **familyname** or **name** in front of &#x27;category&#x27; will define if either a person or a company is created
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactTest() throws ApiException {
        ModelContact response = api.addContact();

        // TODO: test validations
    }
    /**
     * Create a new communication way for a contact
     *
     * Calls addCommunicationWay() in Contact.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactCommunicationWayTest() throws ApiException {
        Integer id = null;
        String value = null;
        Integer key = null;
        String type = null;
        ModelCommunicationWay response = api.addContactCommunicationWay(id, value, key, type);

        // TODO: test validations
    }
    /**
     * Add a new mobile number
     *
     * Calls addMobile in Contact.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMobileTest() throws ApiException {
        Integer id = null;
        api.addMobile(id);

        // TODO: test validations
    }
    /**
     * Add a new phone number
     *
     * Calls addPhone() in Contact.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPhoneTest() throws ApiException {
        Integer id = null;
        api.addPhone(id);

        // TODO: test validations
    }
    /**
     * Add a new website
     *
     * Calls addWeb() in Contact.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWebsiteTest() throws ApiException {
        Integer id = null;
        api.addWebsite(id);

        // TODO: test validations
    }
    /**
     * Add a new email
     *
     * Calls addEmail() in Contact.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactAddEmailTest() throws ApiException {
        Integer id = null;
        api.contactAddEmail(id);

        // TODO: test validations
    }
    /**
     * Create a new contact of type person or company
     *
     * With the new version of sevdesk some models are not created by calling the model.php directly but by calling the factory.php because of better performance and flexibility.    Basically the model.php itself still constructs the model however new instances of the model are created trough the factory.php    So for example when you create a new invoice it wont be saved by a POST request with &#x27;/Invoice?para1&#x3D;&amp;...&#x27; but with the saveInvoice function in Factory.php &#x27;Voucher/Factory/saveInvoice?para1&#x3D;&#x27;    Creating a new contact of type person/company calls a shared path with the same http-verb.    However, both types require certain parameters which will indicate that their type of contact should be created.    So, using **familyname** or **name** in front of &#x27;category&#x27; will define if either a person or a company is created
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactFactoryCreateContactTest() throws ApiException {
        ModelContact response = api.contactFactoryCreateContact();

        // TODO: test validations
    }
    /**
     * Get the addresses of a specified contact
     *
     * Calls getAddresses() in Contact.php to get the addresses of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactGetAddressesTest() throws ApiException {
        Integer id = null;
        Integer categoryId = null;
        String categoryObjectName = null;
        ModelContactAddress response = api.contactGetAddresses(id, categoryId, categoryObjectName);

        // TODO: test validations
    }
    /**
     * Delete an existing contact
     *
     * Calls the delete() function in Contact.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        Integer id = null;
        api.deleteContact(id);

        // TODO: test validations
    }
    /**
     * Get the billing address of a specified contact
     *
     * Calls getBillingAddress() in Contact.php to get the billing address of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactBillingAddressTest() throws ApiException {
        Integer id = null;
        ModelContactAddress response = api.getContactBillingAddress(id);

        // TODO: test validations
    }
    /**
     * Get the billing email of a specified contact
     *
     * Calls getBillingEmail() in Contact.php to get the billing email of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactBillingEmailTest() throws ApiException {
        Integer id = null;
        ModelCommunicationWay response = api.getContactBillingEmail(id);

        // TODO: test validations
    }
    /**
     * Get the communication ways of a specified contact
     *
     * Calls getCommunicationWays() in Contact.php to get the communication ways of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactCommunicationWaysTest() throws ApiException {
        Integer id = null;
        String type = null;
        ModelCommunicationWay response = api.getContactCommunicationWays(id, type);

        // TODO: test validations
    }
    /**
     * Get the main address of a specified contact
     *
     * Calls getMainAddress() in Contact.php to get the main address of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactMainAddressTest() throws ApiException {
        Integer id = null;
        ModelContactAddress response = api.getContactMainAddress(id);

        // TODO: test validations
    }
    /**
     * Get the main email of a specified contact
     *
     * Calls getMainEmail() in Contact.php to get the main email of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactMainEmailTest() throws ApiException {
        Integer id = null;
        ModelCommunicationWay response = api.getContactMainEmail(id);

        // TODO: test validations
    }
    /**
     * Get the main mobile of a specified contact
     *
     * Calls getMainMobile() in Contact.php to get the main mobile of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactMainMobileTest() throws ApiException {
        Integer id = null;
        ModelCommunicationWay response = api.getContactMainMobile(id);

        // TODO: test validations
    }
    /**
     * Get the main phone of a specified contact
     *
     * Calls getMainPhone() in Contact.php to get the main phone of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactMainPhoneTest() throws ApiException {
        Integer id = null;
        ModelCommunicationWay response = api.getContactMainPhone(id);

        // TODO: test validations
    }
    /**
     * Get the main website of a specified contact
     *
     * Calls getMainWebsite() in Contact.php to get the main website of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactMainWebsiteTest() throws ApiException {
        Integer id = null;
        ModelCommunicationWay response = api.getContactMainWebsite(id);

        // TODO: test validations
    }
    /**
     * Get the related communication ways of a specified contact
     *
     * Calls getRelatedCommunicationWays() in Contact.php to get the related communication ways of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactRelatedCommunicationWaysTest() throws ApiException {
        Integer id = null;
        String type = null;
        ModelCommunicationWay response = api.getContactRelatedCommunicationWays(id, type);

        // TODO: test validations
    }
    /**
     * Get number of all invoices, orders, etc. of a specified contact
     *
     * Calls getTabsItemCount() in Contact.php to get the number of all invoices, orders, etc. of a specified contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactTabsItemCountTest() throws ApiException {
        Integer id = null;
        api.getContactTabsItemCount(id);

        // TODO: test validations
    }
    /**
     * Get an overview of all contacts
     *
     * Calls Contact.php to get necessary variables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Integer depth = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelContact response = api.getContacts(depth, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get the next customer number
     *
     * Get the next customer number in the sequence
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNextCustomerNumberTest() throws ApiException {
        api.getNextCustomerNumber();

        // TODO: test validations
    }
    /**
     * Update an existing contact
     *
     * Calls Contact.php to update an existing contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        Integer id = null;
        ModelContact response = api.updateContact(id);

        // TODO: test validations
    }
}
