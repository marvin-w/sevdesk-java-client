/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AggregatorApi
 */
@Ignore
public class AggregatorApiTest {

    private final AggregatorApi api = new AggregatorApi();

    /**
     * Calculates total sum of all asset amounts for the year of the current query
     *
     * Calls calcTotalDepreciation() in Aggregator.php to get total sum of all asset amounts for the year of the current query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorCalcTotalDepreciationTest() throws ApiException {
        api.aggregatorCalcTotalDepreciation();

        // TODO: test validations
    }
    /**
     * Get accounting score
     *
     * Calls getAccountingScore() in Aggregator.php to get your accounting score
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetAccountingScoreTest() throws ApiException {
        String startdate = null;
        String enddate = null;
        api.aggregatorGetAccountingScore(startdate, enddate);

        // TODO: test validations
    }
    /**
     * Get the data which is displayed in the chart on the dashboard in the app
     *
     * Calls getAppRevenueChartData() in Aggregator.php to get data displayed in the revenue chart on the dashboard in the app
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetAppRevenueChartDataTest() throws ApiException {
        api.aggregatorGetAppRevenueChartData();

        // TODO: test validations
    }
    /**
     * Calculates the profit and loss over a specified period
     *
     * Calls getProfitAndLossCalculation() in Aggregator.php to calculate the profit and loss over a specified period.    The output of this function is divided into six groups:  * costs - all invoices/vouchers which contain a spending, again separated into direct [dc] and indirect costs [ic]  * earnings - all invoices/vouchers which contain a earning  * totalcosts  * totalearnings  * totalrevenue  * profit - the profit, difference between costs and earnings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetProfitAndLossCalculationTest() throws ApiException {
        String startDate = null;
        String endDate = null;
        Boolean actualTaxation = null;
        api.aggregatorGetProfitAndLossCalculation(startDate, endDate, actualTaxation);

        // TODO: test validations
    }
    /**
     * Calculates tax of earnings and spending over a specified period
     *
     * Calls getTaxInformation() in Aggregator.php to calculate tax of earnings and spending over a specified period.    This function will return:  * earningsSum (gross earnings), earningsSumNet (net earnings)  * earningsTax - tax on earnings  * expensesSum (gross expenses), expensesSumNet (net expenses)  * expensesTax - tax on expenses  * earningsTaxGroups - list of invoices/vouchers which involved a taxation, separated into tax groups  * expensesTaxGroups - list of invoices/vouchers which involved a taxation, separated into tax groups  * remainingTaxPayable - tax which is yet to be payed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetTaxInformationTest() throws ApiException {
        String type = null;
        String year = null;
        Integer period = null;
        Boolean actualTaxation = null;
        Boolean noActualTaxationOnInputTax = null;
        api.aggregatorGetTaxInformation(type, year, period, actualTaxation, noActualTaxationOnInputTax);

        // TODO: test validations
    }
    /**
     * Get information about the categories of all vouchers in the year of the current query
     *
     * Calls getVoucherCategoryInformation() in Aggregator.php to get information about the categories of all vouchers in the year of the current query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetVoucherCategoryInformationTest() throws ApiException {
        api.aggregatorGetVoucherCategoryInformation();

        // TODO: test validations
    }
    /**
     * Get voucher chart data
     *
     * Calls getVoucherChartData() in Aggregator.php to get voucher chart data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetVoucherChartDataTest() throws ApiException {
        String year = null;
        api.aggregatorGetVoucherChartData(year);

        // TODO: test validations
    }
    /**
     * Get the data which is displayed in the chart on the dashboard
     *
     * Calls getWebRevenueChartData() in Aggregator.php to get data displayed in the revenue chart on the dashboard
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregatorGetWebRevenueChartDataTest() throws ApiException {
        Boolean sumGrossToggle = null;
        api.aggregatorGetWebRevenueChartData(sumGrossToggle);

        // TODO: test validations
    }
}
