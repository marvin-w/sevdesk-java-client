/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.ApiException;
import java.io.File;
import de.wichmann.sevdesk.model.ModelAccountingType;
import de.wichmann.sevdesk.model.ModelVoucher;
import de.wichmann.sevdesk.model.ModelVoucherFactory;
import de.wichmann.sevdesk.model.ModelVoucherLog;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VoucherApi
 */
@Ignore
public class VoucherApiTest {

    private final VoucherApi api = new VoucherApi();

    /**
     * Create a new voucher
     *
     * Calls Voucher.php to create a voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVoucherTest() throws ApiException {
        ModelVoucher response = api.addVoucher();

        // TODO: test validations
    }
    /**
     * Delete an existing voucher
     *
     * Calls the delete() function in Voucher.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVoucherTest() throws ApiException {
        Integer id = null;
        api.deleteVoucher(id);

        // TODO: test validations
    }
    /**
     * Get an overview of all vouchers
     *
     * Calls Voucher.php to get necessary variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVouchersTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelVoucher response = api.getVouchers(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Create a new voucher
     *
     * With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.    Basically the model.php itself still constructs the model however new instances of the model are created trough the factory.php    So for example when you create a new voucher it wont be saved by a POST request with &#x27;/Voucher?para1&#x3D;&amp;...&#x27; but with the saveVoucher function in Factory.php &#x27;Voucher/Factory/saveVoucher?para1&#x3D;&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveVoucherTest() throws ApiException {
        ModelVoucherFactory response = api.saveVoucher();

        // TODO: test validations
    }
    /**
     * Update an existing voucher
     *
     * Calls Voucher.php to update an existing voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVoucherTest() throws ApiException {
        Integer id = null;
        ModelVoucher response = api.updateVoucher(id);

        // TODO: test validations
    }
    /**
     * Book an amount for a specified voucher
     *
     * Book an amount for the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherBookAmountTest() throws ApiException {
        Integer id = null;
        api.voucherBookAmount(id);

        // TODO: test validations
    }
    /**
     * Change status of a specified voucher
     *
     * Change the status of the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherChangeStatusTest() throws ApiException {
        Integer id = null;
        api.voucherChangeStatus(id);

        // TODO: test validations
    }
    /**
     * Delete the document of an existing voucher
     *
     * Calls the deleteDocument() function in Voucher.php to delete the document of an existing voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherDeleteDocumentTest() throws ApiException {
        Integer id = null;
        api.voucherDeleteDocument(id);

        // TODO: test validations
    }
    /**
     * Extract file thumb
     *
     * Calls extractThumb() in Voucher/Factory.php to extract the thumb of the specified file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherExtractThumbTest() throws ApiException {
        String fileName = null;
        api.voucherExtractThumb(fileName);

        // TODO: test validations
    }
    /**
     * Get the accounting types of a specified voucher
     *
     * Calls getAccountingTypes() in Voucher.php to get the accounting types of the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetAccountingTypesTest() throws ApiException {
        Integer id = null;
        List<String> embed = null;
        ModelAccountingType response = api.voucherGetAccountingTypes(id, embed);

        // TODO: test validations
    }
    /**
     * Get the check account transaction logs of a specified voucher
     *
     * Calls getCheckAccountTransactionLogs() in Voucher.php to get the check account transaction logs of the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetCheckAccountTransactionLogsTest() throws ApiException {
        Integer id = null;
        List<String> embed = null;
        api.voucherGetCheckAccountTransactionLogs(id, embed);

        // TODO: test validations
    }
    /**
     * Get the check account transactions of a specified voucher
     *
     * Calls getCheckAccountTransactions() in Voucher.php to get the check account transactions of the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetCheckAccountTransactionsTest() throws ApiException {
        Integer id = null;
        List<String> embed = null;
        api.voucherGetCheckAccountTransactions(id, embed);

        // TODO: test validations
    }
    /**
     * Get the currency of a specified voucher
     *
     * Calls getCurrency() in Voucher.php to get the currency of the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetCurrencyTest() throws ApiException {
        Integer id = null;
        api.voucherGetCurrency(id);

        // TODO: test validations
    }
    /**
     * Get unpaid amount of a specified voucher
     *
     * Calls getDebit() in Voucher.php to get the unpaid amount of a specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetDebitTest() throws ApiException {
        Integer id = null;
        api.voucherGetDebit(id);

        // TODO: test validations
    }
    /**
     * Return if the voucher is delinquent
     *
     * Calls getDelinquent() in Voucher.php to get if the voucher is delinquent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetDelinquentTest() throws ApiException {
        Integer id = null;
        api.voucherGetDelinquent(id);

        // TODO: test validations
    }
    /**
     * Get the depending recurring vouchers of a specified origin voucher
     *
     * Calls getDependingRecurringVouchers() in Voucher.php to get the depending recurring vouchers of the specified origin voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetDependingRecurringVouchersTest() throws ApiException {
        Integer id = null;
        List<String> embed = null;
        ModelVoucher response = api.voucherGetDependingRecurringVouchers(id, embed);

        // TODO: test validations
    }
    /**
     * Returns the base64 encoded preview content of the vouchers document
     *
     * Calls getDocumentImage() in Voucher.php to return the base64 encoded preview content of the vouchers document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetDocumentImageTest() throws ApiException {
        Integer id = null;
        api.voucherGetDocumentImage(id);

        // TODO: test validations
    }
    /**
     * Get an overview of all vouchers
     *
     * Calls Voucher.php to get necessary variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetTaxGroupsTest() throws ApiException {
        Integer id = null;
        Boolean showTotalSum = null;
        Boolean withCorrections = null;
        api.voucherGetTaxGroups(id, showTotalSum, withCorrections);

        // TODO: test validations
    }
    /**
     * Mark a specified voucher as open
     *
     * Mark the specified voucher as open
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherMarkAsOpenTest() throws ApiException {
        Integer id = null;
        ModelVoucher response = api.voucherMarkAsOpen(id);

        // TODO: test validations
    }
    /**
     * Mark a specified voucher as paid
     *
     * Mark the specified voucher as paid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherMarkAsPaidTest() throws ApiException {
        Integer id = null;
        ModelVoucher response = api.voucherMarkAsPaid(id);

        // TODO: test validations
    }
    /**
     * Refund an amount for a specified voucher
     *
     * Refund an amount for the specified voucher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherRefundAmountTest() throws ApiException {
        Integer id = null;
        ModelVoucherLog response = api.voucherRefundAmount(id);

        // TODO: test validations
    }
    /**
     * Upload a temporary file to be used later
     *
     * With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.    Basically the model.php itself still constructs the model however new instances of the model are created trough the factory.php    So for example when you create a new voucher it wont be saved by a POST request with &#x27;/Voucher?para1&#x3D;&amp;...&#x27; but with the saveVoucher function in Factory.php &#x27;Voucher/Factory/saveVoucher?para1&#x3D;&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherUploadTempFileTest() throws ApiException {
        File file = null;
        ModelVoucherFactory response = api.voucherUploadTempFile(file);

        // TODO: test validations
    }
}
