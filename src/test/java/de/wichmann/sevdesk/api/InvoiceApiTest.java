/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.api;

import de.wichmann.sevdesk.model.ModelCheckAccountTransaction;
import de.wichmann.sevdesk.model.ModelCheckAccountTransactionLog;
import de.wichmann.sevdesk.model.ModelDiscounts;
import de.wichmann.sevdesk.model.ModelEmail;
import de.wichmann.sevdesk.model.ModelFeed;
import de.wichmann.sevdesk.model.ModelInvoice;
import de.wichmann.sevdesk.model.ModelInvoiceFactory;
import de.wichmann.sevdesk.model.ModelInvoiceLog;
import de.wichmann.sevdesk.model.ModelInvoicePos;
import de.wichmann.sevdesk.model.ModelTag;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoiceApi
 */
@Ignore
public class InvoiceApiTest {

    private final InvoiceApi api = new InvoiceApi();

    /**
     * Create a new invoice
     *
     * Calls Invoice.php 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInvoiceTest() {
        ModelInvoice response = api.addInvoice();

        // TODO: test validations
    }
    /**
     * Cancel an invoice
     *
     * Calls cancel() in Invoice.php to cancel an invoice and creates a cancellation invoice  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelInvoiceTest() {
        Integer id = null;
        ModelInvoice response = api.cancelInvoice(id);

        // TODO: test validations
    }
    /**
     * Create an new invoice from an existing order
     *
     * With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.    Basically the Model.php itself still constructs the model however new instances of the model are created trough the Factory.php    So for example when you create a new invoice it wont be saved by a POST request with &#x27;/Invoice?para1&#x3D;&amp;...&#x27; but with the saveInvoice function in Factory.php &#x27;Voucher/Factory/saveInvoice?para1&#x3D;&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInvoiceFromOrderTest() {
        ModelInvoice response = api.createInvoiceFromOrder();

        // TODO: test validations
    }
    /**
     * Create an invoice reminder
     *
     * With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.    Basically the Model.php itself still constructs the model however new instances of the model are created trough the Factory.php    So for example when you create a new invoice it wont be saved by a POST request with &#x27;/Invoice?para1&#x3D;&amp;...&#x27; but with the saveInvoice function in Factory.php &#x27;Voucher/Factory/saveInvoice?para1&#x3D;&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInvoiceReminderTest() {
        ModelInvoice response = api.createInvoiceReminder();

        // TODO: test validations
    }
    /**
     * Delete an existing invoice
     *
     * Calls the delete() function in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInvoiceTest() {
        Integer id = null;
        api.deleteInvoice(id);

        // TODO: test validations
    }
    /**
     * Duplicate an existing invoice
     *
     * Calls duplicate() in Invoice.php to duplicate an existing invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateInvoiceTest() {
        Integer id = null;
        ModelInvoice response = api.duplicateInvoice(id);

        // TODO: test validations
    }
    /**
     * Get amount of an invoice including reminders
     *
     * Calls the getTotalInvoiceReminderAndInvoiceAmount function in /Invoice/Factory/ to get the amount of the invoice including its reminders.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoiceAndReminderAmountTest() {
        Integer invoiceId = null;
        String invoiceObjectName = null;
        Object response = api.getInvoiceAndReminderAmount(invoiceId, invoiceObjectName);

        // TODO: test validations
    }
    /**
     * Get the invoice as a PDF
     *
     * Calls getPdf in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoiceAsPdfTest() {
        Integer id = null;
        Boolean download = null;
        api.getInvoiceAsPdf(id, download);

        // TODO: test validations
    }
    /**
     * Get (monetary) amount of all reminders of an invoice
     *
     * Calls the getTotalInvoiceReminderAmount function in /Invoice/Factory/ to get the amount of all reminders of an invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoiceReminderAmountTest() {
        Integer invoiceId = null;
        String invoiceObjectName = null;
        Object response = api.getInvoiceReminderAmount(invoiceId, invoiceObjectName);

        // TODO: test validations
    }
    /**
     * Get an overview of all invoices
     *
     * Calls Invoice.php to get necessary variables. However, not all variables get their value from Invoice.php directly but from other models like Model_InvoicePos or Model_Part
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoicesTest() {
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelInvoice response = api.getInvoices(limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get the next invoice number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNextInvoiceNumberTest() {
        String invoiceType = null;
        Boolean useNextNumber = null;
        api.getNextInvoiceNumber(invoiceType, useNextNumber);

        // TODO: test validations
    }
    /**
     * Add a position to an existing invoice
     *
     * Calls addPosition() in Invoice.php to add a position to an invoice.    This function is not required anymore as there is a function for creating Invoices in Invoice/Factory which includes adding the position.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceAddPositionTest() {
        Integer id = null;
        ModelInvoice response = api.invoiceAddPosition(id);

        // TODO: test validations
    }
    /**
     * Book amount for an invoice
     *
     * Calls bookAmmount() in Invoice.php to book an invoice amount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceBookAmountTest() {
        Integer id = null;
        Integer ammount = null;
        String date = null;
        ModelInvoiceLog response = api.invoiceBookAmount(id, ammount, date);

        // TODO: test validations
    }
    /**
     * Calculate total sum of all invoices of current query
     *
     * Calls calcTotalDebit() in Invoice.php to calculate total sum of all invoices of current query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceCalcTotalDebitTest() {
        api.invoiceCalcTotalDebit();

        // TODO: test validations
    }
    /**
     * Get dunning level of an invoice
     *
     * Calls calculateDunningLevel() in Invoice.php to get the dunning level of an invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceCalculateDunningLevelTest() {
        Integer id = null;
        api.invoiceCalculateDunningLevel(id);

        // TODO: test validations
    }
    /**
     * Change status of an invoice
     *
     * Calls changeStatus() in Invoice.php to book an invoice amount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceChangeStatusTest() {
        Integer id = null;
        Integer value = null;
        ModelInvoice response = api.invoiceChangeStatus(id, value);

        // TODO: test validations
    }
    /**
     * Returns if an invoice is cancled
     *
     * Calls getCancled() in Invoice.php to know if an invoice is cancled
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetCancledTest() {
        Integer id = null;
        api.invoiceGetCancled(id);

        // TODO: test validations
    }
    /**
     * Get check account transaction logs about a specified invoice
     *
     * Calls getCheckAccountTransactionLogs() in Invoice.php to get check account transaction logs about the invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetCheckAccountTransactionLogsTest() {
        Integer id = null;
        List<String> embed = null;
        ModelCheckAccountTransactionLog response = api.invoiceGetCheckAccountTransactionLogs(id, embed);

        // TODO: test validations
    }
    /**
     * Get check account transactions of a specified invoice
     *
     * Calls getCheckAccountTransactions() in Invoice.php to get check account transactions of the invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetCheckAccountTransactionsTest() {
        Integer id = null;
        List<String> embed = null;
        ModelCheckAccountTransaction response = api.invoiceGetCheckAccountTransactions(id, embed);

        // TODO: test validations
    }
    /**
     * Get debit of an invoice
     *
     * Calls getDebit() in Invoice.php to get debit of an invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetDebitTest() {
        Integer id = null;
        api.invoiceGetDebit(id);

        // TODO: test validations
    }
    /**
     * Get if an invoice is delinquent
     *
     * Calls getDelinquent() in Invoice.php to get if an invoice is delinquent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetDelinquentTest() {
        Integer id = null;
        api.invoiceGetDelinquent(id);

        // TODO: test validations
    }
    /**
     * Get the discounts of a specified invoice
     *
     * Calls getDiscounts() in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetDiscountsTest() {
        Integer id = null;
        List<String> embed = null;
        ModelDiscounts response = api.invoiceGetDiscounts(id, embed);

        // TODO: test validations
    }
    /**
     * Get document of an invoice
     *
     * Calls getDocument() in Invoice.php to get the document of an invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetDocumentTest() {
        Integer id = null;
        List<String> embed = null;
        api.invoiceGetDocument(id, embed);

        // TODO: test validations
    }
    /**
     * Get invoice dunnings
     *
     * Calls getDunnings() in Invoice.php to get the dunnings of an invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetDunningsTest() {
        Integer id = null;
        ModelInvoice response = api.invoiceGetDunnings(id);

        // TODO: test validations
    }
    /**
     * Get the feed of a specified invoice
     *
     * Calls getFeed() in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetFeedTest() {
        Integer id = null;
        List<String> embed = null;
        ModelFeed response = api.invoiceGetFeed(id, embed);

        // TODO: test validations
    }
    /**
     * Get final invoice id
     *
     * Calls getFinalInvoiceId() in Invoice.php to get final invoice id of the invoice chain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetFinalInvoiceIdTest() {
        Integer id = null;
        api.invoiceGetFinalInvoiceId(id);

        // TODO: test validations
    }
    /**
     * Returns if the invoice is partially payed
     *
     * Calls getIsPartiallyPaid() in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetIsPartiallyPaidTest() {
        Integer id = null;
        api.invoiceGetIsPartiallyPaid(id);

        // TODO: test validations
    }
    /**
     * Get last dunning date of invoice as timestamp
     *
     * Calls getLastDunningDate() in Invoice.php to get the date of the last dunning of an invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetLastDunningDateTest() {
        Integer id = null;
        api.invoiceGetLastDunningDate(id);

        // TODO: test validations
    }
    /**
     * Get partial invoices of a specified invoice
     *
     * Calls getPartialInvoices() in Invoice.php to get partial invoices of the invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetPartialInvoicesTest() {
        Integer id = null;
        List<String> embed = null;
        ModelInvoice response = api.invoiceGetPartialInvoices(id, embed);

        // TODO: test validations
    }
    /**
     * Get the positions of a specified invoice
     *
     * Calls getPositions() in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetPositionsTest() {
        Integer id = null;
        Integer limit = null;
        Integer offset = null;
        List<String> embed = null;
        ModelInvoicePos response = api.invoiceGetPositions(id, limit, offset, embed);

        // TODO: test validations
    }
    /**
     * Get related objects of a specified invoice
     *
     * Calls getRelatedObjects() in Invoice.php to get related objects of the invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetRelatedObjectsTest() {
        Integer id = null;
        Boolean includeItself = null;
        Boolean sortByType = null;
        List<String> embed = null;
        api.invoiceGetRelatedObjects(id, includeItself, sortByType, embed);

        // TODO: test validations
    }
    /**
     * Get swiss esr
     *
     * Calls getSwissEsr() in Invoice.php to get the swiss esr
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetSwissEsrTest() {
        api.invoiceGetSwissEsr();

        // TODO: test validations
    }
    /**
     * Get swiss esr data
     *
     * Calls getSwissEsrData() in Invoice.php to get the swiss esr data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetSwissEsrDataTest() {
        api.invoiceGetSwissEsrData();

        // TODO: test validations
    }
    /**
     * Get the tags of a specified invoice
     *
     * Calls getTags() in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetTagsTest() {
        Integer id = null;
        List<String> embed = null;
        ModelTag response = api.invoiceGetTags(id, embed);

        // TODO: test validations
    }
    /**
     * Get invoice tax amount in invoice currency
     *
     * Calls getTax() in Invoice.php to get tax amount of invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetTaxTest() {
        Integer id = null;
        Boolean invoiceAmount = null;
        api.invoiceGetTax(id, invoiceAmount);

        // TODO: test validations
    }
    /**
     * Get tax groups of invoice
     *
     * Calls getTaxGroupes() in Invoice.php to get tax groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetTaxGroupsTest() {
        Integer id = null;
        api.invoiceGetTaxGroups(id);

        // TODO: test validations
    }
    /**
     * Get gross invoice amount in invoice currency
     *
     * Calls getTotal() in Invoice.php to get gross amount of invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetTotalTest() {
        Integer id = null;
        Boolean invoiceAmount = null;
        api.invoiceGetTotal(id, invoiceAmount);

        // TODO: test validations
    }
    /**
     * Get total invoice amount in invoice currency
     *
     * Calls getTotalCalc() in Invoice.php to get tax groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetTotalCalcTest() {
        Integer id = null;
        api.invoiceGetTotalCalc(id);

        // TODO: test validations
    }
    /**
     * Get total net invoice amount in invoice currency
     *
     * Calls getTotalNet() in Invoice.php to get total net amount of invoice
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceGetTotalNetTest() {
        Integer id = null;
        Boolean invoiceAmount = null;
        Boolean withoutDiscounts = null;
        api.invoiceGetTotalNet(id, invoiceAmount, withoutDiscounts);

        // TODO: test validations
    }
    /**
     * Returns if the specified invoice has discounts
     *
     * Calls hasDiscounts() in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceHasDiscountsTest() {
        Integer id = null;
        api.invoiceHasDiscounts(id);

        // TODO: test validations
    }
    /**
     * Returns if the specified invoice is the origin of an order
     *
     * Calls isOrigin() in Invoice.php to find out if the invoice is the origin of an order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceIsOriginTest() {
        Integer id = null;
        api.invoiceIsOrigin(id);

        // TODO: test validations
    }
    /**
     * Marks an invoice as sent
     *
     * Calls markAsSent() in Invoice.php to mark an invoice as sent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceMarkAsSentTest() {
        Integer id = null;
        ModelInvoice response = api.invoiceMarkAsSent(id);

        // TODO: test validations
    }
    /**
     * Refund an already payed invoice amount
     *
     * Calls refundAmmount() in Invoice.php to refund an invoice amount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceRefundAmountTest() {
        Integer id = null;
        Integer ammount = null;
        String date = null;
        ModelInvoice response = api.invoiceRefundAmount(id, ammount, date);

        // TODO: test validations
    }
    /**
     * Render invoice document on docserver and return metadata
     *
     * Calls render() in Invoice.php to render invoice document on docserver and return the metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceRenderTest() {
        Integer id = null;
        api.invoiceRender(id);

        // TODO: test validations
    }
    /**
     * Send invoice by desired method
     *
     * Calls sendBy() in Invoice.php to send an invoice by the desired method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invoiceSendByTest() {
        Integer id = null;
        String sendType = null;
        ModelInvoice response = api.invoiceSendBy(id, sendType);

        // TODO: test validations
    }
    /**
     * Create a new invoice (with / without invoice positions and discounts) 
     *
     * With the new version of sevdesk some models are not created by calling the model.php directly but by calling the factory.php because of better performance and flexibility.    Basically the model.php itself still constructs the model however new instances of the model are created trough the factory.php    So for example when you create a new invoice it wont be saved by a POST request with &#x27;/Invoice?para1&#x3D;&amp;...&#x27; but with the saveInvoice function in Factory.php &#x27;Voucher/Factory/saveInvoice?para1&#x3D;&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveInvoiceTest() {
        ModelInvoiceFactory response = api.saveInvoice();

        // TODO: test validations
    }
    /**
     * Send an invoice via Email
     *
     * Calls sendViaEmail in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendInvoiceViaEmailTest() {
        Integer id = null;
        ModelEmail response = api.sendInvoiceViaEmail(id);

        // TODO: test validations
    }
    /**
     * Send an invoice via Letter
     *
     * Calls sendViaPost in Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendInvoiceViaPostTest() {
        Integer id = null;
        ModelInvoice response = api.sendInvoiceViaPost(id);

        // TODO: test validations
    }
    /**
     * Update an existing invoice
     *
     * Calls Invoice.php
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInvoiceTest() {
        Integer id = null;
        ModelInvoice response = api.updateInvoice(id);

        // TODO: test validations
    }
}
