/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelOrder;
import de.wichmann.sevdesk.model.ModelPart;
import de.wichmann.sevdesk.model.ModelUnity;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelOrderPos
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelOrderPos {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("order")

  private ModelOrder order = null;

  @JsonProperty("part")

  private ModelPart part = null;

  @JsonProperty("quantity")

  private Float quantity = null;

  @JsonProperty("price")

  private Float price = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("priority")

  private Integer priority = null;

  @JsonProperty("unity")

  private ModelUnity unity = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("positionNumber")

  private Integer positionNumber = null;

  @JsonProperty("text")

  private String text = null;

  @JsonProperty("discount")

  private Float discount = null;

  @JsonProperty("optional")

  private Boolean optional = null;

  @JsonProperty("optionalChargeable")

  private Boolean optionalChargeable = null;

  @JsonProperty("taxRate")

  private Float taxRate = null;

  @JsonProperty("sumNet")

  private Float sumNet = null;

  @JsonProperty("sumGross")

  private Float sumGross = null;

  @JsonProperty("sumDiscount")

  private Float sumDiscount = null;
  public ModelOrderPos create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * creation date of the order position
  * @return create
  **/
  @Schema(description = "creation date of the order position")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelOrderPos update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the order position was last updated
  * @return update
  **/
  @Schema(description = "date the order position was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelOrderPos order(ModelOrder order) {
    this.order = order;
    return this;
  }

  

  /**
  * Get order
  * @return order
  **/
  @Schema(description = "")
  public ModelOrder getOrder() {
    return order;
  }
  public void setOrder(ModelOrder order) {
    this.order = order;
  }
  public ModelOrderPos part(ModelPart part) {
    this.part = part;
    return this;
  }

  

  /**
  * Get part
  * @return part
  **/
  @Schema(description = "")
  public ModelPart getPart() {
    return part;
  }
  public void setPart(ModelPart part) {
    this.part = part;
  }
  public ModelOrderPos quantity(Float quantity) {
    this.quantity = quantity;
    return this;
  }

  

  /**
  * quantity of the Model_Part
  * @return quantity
  **/
  @Schema(description = "quantity of the Model_Part")
  public Float getQuantity() {
    return quantity;
  }
  public void setQuantity(Float quantity) {
    this.quantity = quantity;
  }
  public ModelOrderPos price(Float price) {
    this.price = price;
    return this;
  }

  

  /**
  * price of the Model_Part
  * @return price
  **/
  @Schema(description = "price of the Model_Part")
  public Float getPrice() {
    return price;
  }
  public void setPrice(Float price) {
    this.price = price;
  }
  public ModelOrderPos name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelOrderPos priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  

  /**
  * Get priority
  * @return priority
  **/
  @Schema(description = "")
  public Integer getPriority() {
    return priority;
  }
  public void setPriority(Integer priority) {
    this.priority = priority;
  }
  public ModelOrderPos unity(ModelUnity unity) {
    this.unity = unity;
    return this;
  }

  

  /**
  * Get unity
  * @return unity
  **/
  @Schema(description = "")
  public ModelUnity getUnity() {
    return unity;
  }
  public void setUnity(ModelUnity unity) {
    this.unity = unity;
  }
  public ModelOrderPos sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelOrderPos positionNumber(Integer positionNumber) {
    this.positionNumber = positionNumber;
    return this;
  }

  

  /**
  * Get positionNumber
  * @return positionNumber
  **/
  @Schema(description = "")
  public Integer getPositionNumber() {
    return positionNumber;
  }
  public void setPositionNumber(Integer positionNumber) {
    this.positionNumber = positionNumber;
  }
  public ModelOrderPos text(String text) {
    this.text = text;
    return this;
  }

  

  /**
  * Get text
  * @return text
  **/
  @Schema(description = "")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }
  public ModelOrderPos discount(Float discount) {
    this.discount = discount;
    return this;
  }

  

  /**
  * Get discount
  * @return discount
  **/
  @Schema(description = "")
  public Float getDiscount() {
    return discount;
  }
  public void setDiscount(Float discount) {
    this.discount = discount;
  }
  public ModelOrderPos optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

  

  /**
  * Get optional
  * @return optional
  **/
  @Schema(description = "")
  public Boolean isOptional() {
    return optional;
  }
  public void setOptional(Boolean optional) {
    this.optional = optional;
  }
  public ModelOrderPos optionalChargeable(Boolean optionalChargeable) {
    this.optionalChargeable = optionalChargeable;
    return this;
  }

  

  /**
  * Get optionalChargeable
  * @return optionalChargeable
  **/
  @Schema(description = "")
  public Boolean isOptionalChargeable() {
    return optionalChargeable;
  }
  public void setOptionalChargeable(Boolean optionalChargeable) {
    this.optionalChargeable = optionalChargeable;
  }
  public ModelOrderPos taxRate(Float taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  

  /**
  * Get taxRate
  * @return taxRate
  **/
  @Schema(description = "")
  public Float getTaxRate() {
    return taxRate;
  }
  public void setTaxRate(Float taxRate) {
    this.taxRate = taxRate;
  }
  public ModelOrderPos sumNet(Float sumNet) {
    this.sumNet = sumNet;
    return this;
  }

  

  /**
  * Get sumNet
  * @return sumNet
  **/
  @Schema(description = "")
  public Float getSumNet() {
    return sumNet;
  }
  public void setSumNet(Float sumNet) {
    this.sumNet = sumNet;
  }
  public ModelOrderPos sumGross(Float sumGross) {
    this.sumGross = sumGross;
    return this;
  }

  

  /**
  * Get sumGross
  * @return sumGross
  **/
  @Schema(description = "")
  public Float getSumGross() {
    return sumGross;
  }
  public void setSumGross(Float sumGross) {
    this.sumGross = sumGross;
  }
  public ModelOrderPos sumDiscount(Float sumDiscount) {
    this.sumDiscount = sumDiscount;
    return this;
  }

  

  /**
  * Get sumDiscount
  * @return sumDiscount
  **/
  @Schema(description = "")
  public Float getSumDiscount() {
    return sumDiscount;
  }
  public void setSumDiscount(Float sumDiscount) {
    this.sumDiscount = sumDiscount;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelOrderPos modelOrderPos = (ModelOrderPos) o;
    return Objects.equals(this.create, modelOrderPos.create) &&
        Objects.equals(this.update, modelOrderPos.update) &&
        Objects.equals(this.order, modelOrderPos.order) &&
        Objects.equals(this.part, modelOrderPos.part) &&
        Objects.equals(this.quantity, modelOrderPos.quantity) &&
        Objects.equals(this.price, modelOrderPos.price) &&
        Objects.equals(this.name, modelOrderPos.name) &&
        Objects.equals(this.priority, modelOrderPos.priority) &&
        Objects.equals(this.unity, modelOrderPos.unity) &&
        Objects.equals(this.sevClient, modelOrderPos.sevClient) &&
        Objects.equals(this.positionNumber, modelOrderPos.positionNumber) &&
        Objects.equals(this.text, modelOrderPos.text) &&
        Objects.equals(this.discount, modelOrderPos.discount) &&
        Objects.equals(this.optional, modelOrderPos.optional) &&
        Objects.equals(this.optionalChargeable, modelOrderPos.optionalChargeable) &&
        Objects.equals(this.taxRate, modelOrderPos.taxRate) &&
        Objects.equals(this.sumNet, modelOrderPos.sumNet) &&
        Objects.equals(this.sumGross, modelOrderPos.sumGross) &&
        Objects.equals(this.sumDiscount, modelOrderPos.sumDiscount);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, order, part, quantity, price, name, priority, unity, sevClient, positionNumber, text, discount, optional, optionalChargeable, taxRate, sumNet, sumGross, sumDiscount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelOrderPos {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    unity: ").append(toIndentedString(unity)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    positionNumber: ").append(toIndentedString(positionNumber)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    optionalChargeable: ").append(toIndentedString(optionalChargeable)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    sumNet: ").append(toIndentedString(sumNet)).append("\n");
    sb.append("    sumGross: ").append(toIndentedString(sumGross)).append("\n");
    sb.append("    sumDiscount: ").append(toIndentedString(sumDiscount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
