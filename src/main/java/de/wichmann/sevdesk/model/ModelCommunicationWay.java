/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelCommunicationWayKey;
import de.wichmann.sevdesk.model.ModelContact;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelCommunicationWay
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:13:41.764+02:00[Europe/Berlin]")public class ModelCommunicationWay {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("contact")

  private ModelContact contact = null;
  /**
   * type of the communication way
   */
  public enum TypeEnum {
    EMAIL("EMAIL"),
    PHONE("PHONE"),
    WEB("WEB"),
    MOBILE("MOBILE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("type")

  private TypeEnum type = null;

  @JsonProperty("value")

  private String value = null;

  @JsonProperty("key")

  private ModelCommunicationWayKey key = null;

  @JsonProperty("main")

  private Boolean main = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;
  public ModelCommunicationWay create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the communication way was created
  * @return create
  **/
  @Schema(description = "date the communication way was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelCommunicationWay update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the communication way was last updated
  * @return update
  **/
  @Schema(description = "date the communication way was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelCommunicationWay contact(ModelContact contact) {
    this.contact = contact;
    return this;
  }

  

  /**
  * Get contact
  * @return contact
  **/
  @Schema(description = "")
  public ModelContact getContact() {
    return contact;
  }
  public void setContact(ModelContact contact) {
    this.contact = contact;
  }
  public ModelCommunicationWay type(TypeEnum type) {
    this.type = type;
    return this;
  }

  

  /**
  * type of the communication way
  * @return type
  **/
  @Schema(description = "type of the communication way")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }
  public ModelCommunicationWay value(String value) {
    this.value = value;
    return this;
  }

  

  /**
  * value of the communication way
  * @return value
  **/
  @Schema(description = "value of the communication way")
  public String getValue() {
    return value;
  }
  public void setValue(String value) {
    this.value = value;
  }
  public ModelCommunicationWay key(ModelCommunicationWayKey key) {
    this.key = key;
    return this;
  }

  

  /**
  * Get key
  * @return key
  **/
  @Schema(description = "")
  public ModelCommunicationWayKey getKey() {
    return key;
  }
  public void setKey(ModelCommunicationWayKey key) {
    this.key = key;
  }
  public ModelCommunicationWay main(Boolean main) {
    this.main = main;
    return this;
  }

  

  /**
  * Get main
  * @return main
  **/
  @Schema(description = "")
  public Boolean isMain() {
    return main;
  }
  public void setMain(Boolean main) {
    this.main = main;
  }
  public ModelCommunicationWay sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelCommunicationWay modelCommunicationWay = (ModelCommunicationWay) o;
    return Objects.equals(this.create, modelCommunicationWay.create) &&
        Objects.equals(this.update, modelCommunicationWay.update) &&
        Objects.equals(this.contact, modelCommunicationWay.contact) &&
        Objects.equals(this.type, modelCommunicationWay.type) &&
        Objects.equals(this.value, modelCommunicationWay.value) &&
        Objects.equals(this.key, modelCommunicationWay.key) &&
        Objects.equals(this.main, modelCommunicationWay.main) &&
        Objects.equals(this.sevClient, modelCommunicationWay.sevClient);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, contact, type, value, key, main, sevClient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelCommunicationWay {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
