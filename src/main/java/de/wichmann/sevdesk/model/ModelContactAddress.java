/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelCategory;
import de.wichmann.sevdesk.model.ModelContact;
import de.wichmann.sevdesk.model.ModelStaticCountry;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelContactAddress
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:13:41.764+02:00[Europe/Berlin]")public class ModelContactAddress {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("contact")

  private ModelContact contact = null;

  @JsonProperty("street")

  private String street = null;

  @JsonProperty("zip")

  private String zip = null;

  @JsonProperty("city")

  private String city = null;

  @JsonProperty("country")

  private ModelStaticCountry country = null;

  @JsonProperty("category")

  private ModelCategory category = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("name2")

  private String name2 = null;

  @JsonProperty("name3")

  private String name3 = null;

  @JsonProperty("name4")

  private String name4 = null;
  public ModelContactAddress create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * the creation date of the contact
  * @return create
  **/
  @Schema(description = "the creation date of the contact")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelContactAddress update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date, the contact was last updated
  * @return update
  **/
  @Schema(description = "date, the contact was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelContactAddress contact(ModelContact contact) {
    this.contact = contact;
    return this;
  }

  

  /**
  * Get contact
  * @return contact
  **/
  @Schema(description = "")
  public ModelContact getContact() {
    return contact;
  }
  public void setContact(ModelContact contact) {
    this.contact = contact;
  }
  public ModelContactAddress street(String street) {
    this.street = street;
    return this;
  }

  

  /**
  * Get street
  * @return street
  **/
  @Schema(description = "")
  public String getStreet() {
    return street;
  }
  public void setStreet(String street) {
    this.street = street;
  }
  public ModelContactAddress zip(String zip) {
    this.zip = zip;
    return this;
  }

  

  /**
  * zip of the city/village
  * @return zip
  **/
  @Schema(description = "zip of the city/village")
  public String getZip() {
    return zip;
  }
  public void setZip(String zip) {
    this.zip = zip;
  }
  public ModelContactAddress city(String city) {
    this.city = city;
    return this;
  }

  

  /**
  * Get city
  * @return city
  **/
  @Schema(description = "")
  public String getCity() {
    return city;
  }
  public void setCity(String city) {
    this.city = city;
  }
  public ModelContactAddress country(ModelStaticCountry country) {
    this.country = country;
    return this;
  }

  

  /**
  * Get country
  * @return country
  **/
  @Schema(description = "")
  public ModelStaticCountry getCountry() {
    return country;
  }
  public void setCountry(ModelStaticCountry country) {
    this.country = country;
  }
  public ModelContactAddress category(ModelCategory category) {
    this.category = category;
    return this;
  }

  

  /**
  * Get category
  * @return category
  **/
  @Schema(description = "")
  public ModelCategory getCategory() {
    return category;
  }
  public void setCategory(ModelCategory category) {
    this.category = category;
  }
  public ModelContactAddress name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelContactAddress sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelContactAddress name2(String name2) {
    this.name2 = name2;
    return this;
  }

  

  /**
  * Get name2
  * @return name2
  **/
  @Schema(description = "")
  public String getName2() {
    return name2;
  }
  public void setName2(String name2) {
    this.name2 = name2;
  }
  public ModelContactAddress name3(String name3) {
    this.name3 = name3;
    return this;
  }

  

  /**
  * Get name3
  * @return name3
  **/
  @Schema(description = "")
  public String getName3() {
    return name3;
  }
  public void setName3(String name3) {
    this.name3 = name3;
  }
  public ModelContactAddress name4(String name4) {
    this.name4 = name4;
    return this;
  }

  

  /**
  * Get name4
  * @return name4
  **/
  @Schema(description = "")
  public String getName4() {
    return name4;
  }
  public void setName4(String name4) {
    this.name4 = name4;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelContactAddress modelContactAddress = (ModelContactAddress) o;
    return Objects.equals(this.create, modelContactAddress.create) &&
        Objects.equals(this.update, modelContactAddress.update) &&
        Objects.equals(this.contact, modelContactAddress.contact) &&
        Objects.equals(this.street, modelContactAddress.street) &&
        Objects.equals(this.zip, modelContactAddress.zip) &&
        Objects.equals(this.city, modelContactAddress.city) &&
        Objects.equals(this.country, modelContactAddress.country) &&
        Objects.equals(this.category, modelContactAddress.category) &&
        Objects.equals(this.name, modelContactAddress.name) &&
        Objects.equals(this.sevClient, modelContactAddress.sevClient) &&
        Objects.equals(this.name2, modelContactAddress.name2) &&
        Objects.equals(this.name3, modelContactAddress.name3) &&
        Objects.equals(this.name4, modelContactAddress.name4);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, contact, street, zip, city, country, category, name, sevClient, name2, name3, name4);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelContactAddress {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    name2: ").append(toIndentedString(name2)).append("\n");
    sb.append("    name3: ").append(toIndentedString(name3)).append("\n");
    sb.append("    name4: ").append(toIndentedString(name4)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
