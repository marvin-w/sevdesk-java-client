/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelSevSequence
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelSevSequence {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("forObject")

  private String forObject = null;

  @JsonProperty("format")

  private String format = null;

  @JsonProperty("nextSequence")

  private Integer nextSequence = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("type")

  private String type = null;
  public ModelSevSequence create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the SevSequence was created
  * @return create
  **/
  @Schema(description = "date the SevSequence was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelSevSequence update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the SevSequence was last updated
  * @return update
  **/
  @Schema(description = "date the SevSequence was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelSevSequence forObject(String forObject) {
    this.forObject = forObject;
    return this;
  }

  

  /**
  * Object for which the sequence is
  * @return forObject
  **/
  @Schema(description = "Object for which the sequence is")
  public String getForObject() {
    return forObject;
  }
  public void setForObject(String forObject) {
    this.forObject = forObject;
  }
  public ModelSevSequence format(String format) {
    this.format = format;
    return this;
  }

  

  /**
  * Format of the sequence
  * @return format
  **/
  @Schema(description = "Format of the sequence")
  public String getFormat() {
    return format;
  }
  public void setFormat(String format) {
    this.format = format;
  }
  public ModelSevSequence nextSequence(Integer nextSequence) {
    this.nextSequence = nextSequence;
    return this;
  }

  

  /**
  * next sequence of the object
  * @return nextSequence
  **/
  @Schema(description = "next sequence of the object")
  public Integer getNextSequence() {
    return nextSequence;
  }
  public void setNextSequence(Integer nextSequence) {
    this.nextSequence = nextSequence;
  }
  public ModelSevSequence sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * Get sevClient
  * @return sevClient
  **/
  @Schema(description = "")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelSevSequence type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * type of the object
  * @return type
  **/
  @Schema(description = "type of the object")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelSevSequence modelSevSequence = (ModelSevSequence) o;
    return Objects.equals(this.create, modelSevSequence.create) &&
        Objects.equals(this.update, modelSevSequence.update) &&
        Objects.equals(this.forObject, modelSevSequence.forObject) &&
        Objects.equals(this.format, modelSevSequence.format) &&
        Objects.equals(this.nextSequence, modelSevSequence.nextSequence) &&
        Objects.equals(this.sevClient, modelSevSequence.sevClient) &&
        Objects.equals(this.type, modelSevSequence.type);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, forObject, format, nextSequence, sevClient, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelSevSequence {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    forObject: ").append(toIndentedString(forObject)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    nextSequence: ").append(toIndentedString(nextSequence)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
