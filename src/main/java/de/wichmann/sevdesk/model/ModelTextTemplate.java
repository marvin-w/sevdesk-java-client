/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelTextTemplate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelTextTemplate {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("text")

  private String text = null;
  /**
   * object type for which you want to use the text template
   */
  public enum ObjectTypeEnum {
    RE("RE"),
    AN("AN"),
    AB("AB"),
    LI("LI"),
    MA("MA"),
    MAIL("MAIL");

    private String value;

    ObjectTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ObjectTypeEnum fromValue(String text) {
      for (ObjectTypeEnum b : ObjectTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("objectType")

  private ObjectTypeEnum objectType = null;
  /**
   * type of your text
   */
  public enum TextTypeEnum {
    HEAD("HEAD"),
    FOOT("FOOT");

    private String value;

    TextTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TextTypeEnum fromValue(String text) {
      for (TextTypeEnum b : TextTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("textType")

  private TextTypeEnum textType = null;

  @JsonProperty("sevUser")

  private Object sevUser = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("main")

  private Boolean main = null;
  public ModelTextTemplate create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the text template was created
  * @return create
  **/
  @Schema(description = "date the text template was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelTextTemplate update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the text template was last updated
  * @return update
  **/
  @Schema(description = "date the text template was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelTextTemplate name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * name of the text template
  * @return name
  **/
  @Schema(description = "name of the text template")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelTextTemplate text(String text) {
    this.text = text;
    return this;
  }

  

  /**
  * text of your text template
  * @return text
  **/
  @Schema(description = "text of your text template")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }
  public ModelTextTemplate objectType(ObjectTypeEnum objectType) {
    this.objectType = objectType;
    return this;
  }

  

  /**
  * object type for which you want to use the text template
  * @return objectType
  **/
  @Schema(description = "object type for which you want to use the text template")
  public ObjectTypeEnum getObjectType() {
    return objectType;
  }
  public void setObjectType(ObjectTypeEnum objectType) {
    this.objectType = objectType;
  }
  public ModelTextTemplate textType(TextTypeEnum textType) {
    this.textType = textType;
    return this;
  }

  

  /**
  * type of your text
  * @return textType
  **/
  @Schema(description = "type of your text")
  public TextTypeEnum getTextType() {
    return textType;
  }
  public void setTextType(TextTypeEnum textType) {
    this.textType = textType;
  }
  public ModelTextTemplate sevUser(Object sevUser) {
    this.sevUser = sevUser;
    return this;
  }

  

  /**
  * sevUser who created the text template
  * @return sevUser
  **/
  @Schema(description = "sevUser who created the text template")
  public Object getSevUser() {
    return sevUser;
  }
  public void setSevUser(Object sevUser) {
    this.sevUser = sevUser;
  }
  public ModelTextTemplate sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelTextTemplate main(Boolean main) {
    this.main = main;
    return this;
  }

  

  /**
  * defines if the text template is used as the main template
  * @return main
  **/
  @Schema(description = "defines if the text template is used as the main template")
  public Boolean isMain() {
    return main;
  }
  public void setMain(Boolean main) {
    this.main = main;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelTextTemplate modelTextTemplate = (ModelTextTemplate) o;
    return Objects.equals(this.create, modelTextTemplate.create) &&
        Objects.equals(this.update, modelTextTemplate.update) &&
        Objects.equals(this.name, modelTextTemplate.name) &&
        Objects.equals(this.text, modelTextTemplate.text) &&
        Objects.equals(this.objectType, modelTextTemplate.objectType) &&
        Objects.equals(this.textType, modelTextTemplate.textType) &&
        Objects.equals(this.sevUser, modelTextTemplate.sevUser) &&
        Objects.equals(this.sevClient, modelTextTemplate.sevClient) &&
        Objects.equals(this.main, modelTextTemplate.main);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, name, text, objectType, textType, sevUser, sevClient, main);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelTextTemplate {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    textType: ").append(toIndentedString(textType)).append("\n");
    sb.append("    sevUser: ").append(toIndentedString(sevUser)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
