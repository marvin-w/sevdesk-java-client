/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelSubscriptionType
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelSubscriptionType {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("planCode")

  private String planCode = null;

  @JsonProperty("planDuration")

  private String planDuration = null;

  @JsonProperty("externalProductId")

  private String externalProductId = null;

  @JsonProperty("externalProductIdSandbox")

  private String externalProductIdSandbox = null;

  @JsonProperty("sumNet")

  private Float sumNet = null;

  @JsonProperty("sumVat")

  private Float sumVat = null;

  @JsonProperty("sumGross")

  private Float sumGross = null;

  @JsonProperty("externalProductIdGbp")

  private String externalProductIdGbp = null;

  @JsonProperty("sumNetGbp")

  private Float sumNetGbp = null;

  @JsonProperty("translationCode")

  private String translationCode = null;
  public ModelSubscriptionType create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the subscription type was created
  * @return create
  **/
  @Schema(description = "date the subscription type was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelSubscriptionType update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the subscription type was last updated
  * @return update
  **/
  @Schema(description = "date the subscription type was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelSubscriptionType name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * name of the subscription type
  * @return name
  **/
  @Schema(description = "name of the subscription type")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelSubscriptionType planCode(String planCode) {
    this.planCode = planCode;
    return this;
  }

  

  /**
  * code of the subscription plan
  * @return planCode
  **/
  @Schema(description = "code of the subscription plan")
  public String getPlanCode() {
    return planCode;
  }
  public void setPlanCode(String planCode) {
    this.planCode = planCode;
  }
  public ModelSubscriptionType planDuration(String planDuration) {
    this.planDuration = planDuration;
    return this;
  }

  

  /**
  * duration of the subscription plan in months
  * @return planDuration
  **/
  @Schema(description = "duration of the subscription plan in months")
  public String getPlanDuration() {
    return planDuration;
  }
  public void setPlanDuration(String planDuration) {
    this.planDuration = planDuration;
  }
  public ModelSubscriptionType externalProductId(String externalProductId) {
    this.externalProductId = externalProductId;
    return this;
  }

  

  /**
  * Get externalProductId
  * @return externalProductId
  **/
  @Schema(description = "")
  public String getExternalProductId() {
    return externalProductId;
  }
  public void setExternalProductId(String externalProductId) {
    this.externalProductId = externalProductId;
  }
  public ModelSubscriptionType externalProductIdSandbox(String externalProductIdSandbox) {
    this.externalProductIdSandbox = externalProductIdSandbox;
    return this;
  }

  

  /**
  * Get externalProductIdSandbox
  * @return externalProductIdSandbox
  **/
  @Schema(description = "")
  public String getExternalProductIdSandbox() {
    return externalProductIdSandbox;
  }
  public void setExternalProductIdSandbox(String externalProductIdSandbox) {
    this.externalProductIdSandbox = externalProductIdSandbox;
  }
  public ModelSubscriptionType sumNet(Float sumNet) {
    this.sumNet = sumNet;
    return this;
  }

  

  /**
  * net sum payable for the subscription type
  * @return sumNet
  **/
  @Schema(description = "net sum payable for the subscription type")
  public Float getSumNet() {
    return sumNet;
  }
  public void setSumNet(Float sumNet) {
    this.sumNet = sumNet;
  }
  public ModelSubscriptionType sumVat(Float sumVat) {
    this.sumVat = sumVat;
    return this;
  }

  

  /**
  * vat sum payable for the subscription type
  * @return sumVat
  **/
  @Schema(description = "vat sum payable for the subscription type")
  public Float getSumVat() {
    return sumVat;
  }
  public void setSumVat(Float sumVat) {
    this.sumVat = sumVat;
  }
  public ModelSubscriptionType sumGross(Float sumGross) {
    this.sumGross = sumGross;
    return this;
  }

  

  /**
  * gross sum payable for the subscription type
  * @return sumGross
  **/
  @Schema(description = "gross sum payable for the subscription type")
  public Float getSumGross() {
    return sumGross;
  }
  public void setSumGross(Float sumGross) {
    this.sumGross = sumGross;
  }
  public ModelSubscriptionType externalProductIdGbp(String externalProductIdGbp) {
    this.externalProductIdGbp = externalProductIdGbp;
    return this;
  }

  

  /**
  * Get externalProductIdGbp
  * @return externalProductIdGbp
  **/
  @Schema(description = "")
  public String getExternalProductIdGbp() {
    return externalProductIdGbp;
  }
  public void setExternalProductIdGbp(String externalProductIdGbp) {
    this.externalProductIdGbp = externalProductIdGbp;
  }
  public ModelSubscriptionType sumNetGbp(Float sumNetGbp) {
    this.sumNetGbp = sumNetGbp;
    return this;
  }

  

  /**
  * Get sumNetGbp
  * @return sumNetGbp
  **/
  @Schema(description = "")
  public Float getSumNetGbp() {
    return sumNetGbp;
  }
  public void setSumNetGbp(Float sumNetGbp) {
    this.sumNetGbp = sumNetGbp;
  }
  public ModelSubscriptionType translationCode(String translationCode) {
    this.translationCode = translationCode;
    return this;
  }

  

  /**
  * translation code for the subscription type
  * @return translationCode
  **/
  @Schema(description = "translation code for the subscription type")
  public String getTranslationCode() {
    return translationCode;
  }
  public void setTranslationCode(String translationCode) {
    this.translationCode = translationCode;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelSubscriptionType modelSubscriptionType = (ModelSubscriptionType) o;
    return Objects.equals(this.create, modelSubscriptionType.create) &&
        Objects.equals(this.update, modelSubscriptionType.update) &&
        Objects.equals(this.name, modelSubscriptionType.name) &&
        Objects.equals(this.planCode, modelSubscriptionType.planCode) &&
        Objects.equals(this.planDuration, modelSubscriptionType.planDuration) &&
        Objects.equals(this.externalProductId, modelSubscriptionType.externalProductId) &&
        Objects.equals(this.externalProductIdSandbox, modelSubscriptionType.externalProductIdSandbox) &&
        Objects.equals(this.sumNet, modelSubscriptionType.sumNet) &&
        Objects.equals(this.sumVat, modelSubscriptionType.sumVat) &&
        Objects.equals(this.sumGross, modelSubscriptionType.sumGross) &&
        Objects.equals(this.externalProductIdGbp, modelSubscriptionType.externalProductIdGbp) &&
        Objects.equals(this.sumNetGbp, modelSubscriptionType.sumNetGbp) &&
        Objects.equals(this.translationCode, modelSubscriptionType.translationCode);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, name, planCode, planDuration, externalProductId, externalProductIdSandbox, sumNet, sumVat, sumGross, externalProductIdGbp, sumNetGbp, translationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelSubscriptionType {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    planCode: ").append(toIndentedString(planCode)).append("\n");
    sb.append("    planDuration: ").append(toIndentedString(planDuration)).append("\n");
    sb.append("    externalProductId: ").append(toIndentedString(externalProductId)).append("\n");
    sb.append("    externalProductIdSandbox: ").append(toIndentedString(externalProductIdSandbox)).append("\n");
    sb.append("    sumNet: ").append(toIndentedString(sumNet)).append("\n");
    sb.append("    sumVat: ").append(toIndentedString(sumVat)).append("\n");
    sb.append("    sumGross: ").append(toIndentedString(sumGross)).append("\n");
    sb.append("    externalProductIdGbp: ").append(toIndentedString(externalProductIdGbp)).append("\n");
    sb.append("    sumNetGbp: ").append(toIndentedString(sumNetGbp)).append("\n");
    sb.append("    translationCode: ").append(toIndentedString(translationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
