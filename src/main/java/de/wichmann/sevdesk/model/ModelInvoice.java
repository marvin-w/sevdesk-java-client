/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.time.OffsetDateTime;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import de.wichmann.sevdesk.jackson.NumericBooleanDeserializer;
import de.wichmann.sevdesk.jackson.NumericBooleanSerializer;
import io.swagger.v3.oas.annotations.media.Schema;


/**
 * ModelInvoice
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")
public class ModelInvoice
{

	@JsonProperty("id")

	private Integer id;

	@JsonProperty("invoiceNumber")

	private String invoiceNumber = null;

	@JsonProperty("contact")

	private ModelContact contact = null;

	@JsonProperty("create")

	private OffsetDateTime create = null;

	@JsonProperty("update")

	private OffsetDateTime update = null;

	@JsonProperty("invoiceDate")

	private OffsetDateTime invoiceDate = null;

	@JsonProperty("header")

	private String header = null;

	@JsonProperty("headText")

	private String headText = null;

	@JsonProperty("footText")

	private String footText = null;

	@JsonProperty("timeToPay")

	private OffsetDateTime timeToPay = null;

	@JsonProperty("discountTime")

	private OffsetDateTime discountTime = null;

	@JsonProperty("discount")

	private Float discount = null;

	@JsonProperty("addressName")

	private String addressName = null;

	@JsonProperty("addressStreet")

	private String addressStreet = null;

	@JsonProperty("addressZip")

	private String addressZip = null;

	@JsonProperty("addressCity")

	private String addressCity = null;

	@JsonProperty("addressCountry")

	private ModelStaticCountry addressCountry = null;

	@JsonProperty("payDate")

	private OffsetDateTime payDate = null;

	@JsonProperty("createUser")

	private ModelSevUser createUser = null;

	@JsonProperty("sevClient")

	private Object sevClient = null;

	@JsonProperty("deliveryDate")

	private OffsetDateTime deliveryDate = null;

	@JsonProperty("status")

	private Integer status = null;

	@JsonProperty("smallSettlement")
	@JsonSerialize(using = NumericBooleanSerializer.class)
	@JsonDeserialize(using = NumericBooleanDeserializer.class)
	private Boolean smallSettlement = null;

	@JsonProperty("contactPerson")

	private ModelSevUser contactPerson = null;

	@JsonProperty("taxRate")

	private Float taxRate = null;

	/**
	 * additional text when adding a value added tax regulation
	 */
	public enum TaxTextEnum
	{
		UMSATZSTEUER_AUSWEISEN("Umsatzsteuer ausweisen"),
		STEUERFREIE_INNERGEMEINSCHAFTLICHE_LIEFERUNG_EUROP_ISCHE_UNION_(
				"Steuerfreie innergemeinschaftliche Lieferung(Europäische Union)"),
		STEUERSCHULDNERSCHAFT_DES_LEISTUNGSEMPF_NGERS_AU_ERHALB_EU_Z_B_SCHWEIZ_(
				"Steuerschuldnerschaft des Leistungsempfängers (Außerhalb EU, z.B. Schweiz)");

		private String value;

		TaxTextEnum(String value)
		{
			this.value = value;
		}

		@JsonValue
		public String getValue()
		{
			return value;
		}

		@Override
		public String toString()
		{
			return String.valueOf(value);
		}

		@JsonCreator
		public static TaxTextEnum fromValue(String text)
		{
			for (TaxTextEnum b : TaxTextEnum.values())
			{
				if (String.valueOf(b.value).equals(text))
				{
					return b;
				}
			}
			return null;
		}


	}

	@JsonProperty("taxText")

	private TaxTextEnum taxText = null;

	@JsonProperty("dunningLevel")

	private Integer dunningLevel = null;

	@JsonProperty("addressParentName")

	private String addressParentName = null;

	@JsonProperty("addressContactRef")

	private ModelContactAddress addressContactRef = null;

	/**
	 * Gets or Sets taxType
	 */
	public enum TaxTypeEnum
	{
		DEFAULT("default"),
		EU("eu"),
		NOTEU("noteu");

		private String value;

		TaxTypeEnum(String value)
		{
			this.value = value;
		}

		@JsonValue
		public String getValue()
		{
			return value;
		}

		@Override
		public String toString()
		{
			return String.valueOf(value);
		}

		@JsonCreator
		public static TaxTypeEnum fromValue(String text)
		{
			for (TaxTypeEnum b : TaxTypeEnum.values())
			{
				if (String.valueOf(b.value).equals(text))
				{
					return b;
				}
			}
			return null;
		}


	}

	@JsonProperty("taxType")

	private TaxTypeEnum taxType = null;

	@JsonProperty("paymentMethod")

	private ModelPaymentMethod paymentMethod = null;

	@JsonProperty("costCentre")

	private ModelCostCentre costCentre = null;

	@JsonProperty("sendDate")

	private OffsetDateTime sendDate = null;

	@JsonProperty("origin")

	private Object origin = null;

	/**
	 * type of the invoice
	 */
	public enum InvoiceTypeEnum
	{
		RE_INVOICE_("RE (Invoice)"),
		MA_INVOICE_REMINDER_("MA (Invoice reminder)"),
		WKR_PERIODIC_INVOICE_("WKR (periodic invoice)");

		private String value;

		InvoiceTypeEnum(String value)
		{
			this.value = value;
		}

		@JsonValue
		public String getValue()
		{
			return value;
		}

		@Override
		public String toString()
		{
			return String.valueOf(value);
		}

		@JsonCreator
		public static InvoiceTypeEnum fromValue(String text)
		{
			for (InvoiceTypeEnum b : InvoiceTypeEnum.values())
			{
				if (String.valueOf(b.value).equals(text))
				{
					return b;
				}
			}
			return null;
		}


	}

	@JsonProperty("invoiceType")

	private InvoiceTypeEnum invoiceType = null;

	@JsonProperty("accountIntervall")

	private Integer accountIntervall = null;

	@JsonProperty("accountLastInvoice")

	private OffsetDateTime accountLastInvoice = null;

	@JsonProperty("accountNextInvoice")

	private OffsetDateTime accountNextInvoice = null;

	@JsonProperty("reminderTotal")

	private Float reminderTotal = null;

	@JsonProperty("reminderDebit")

	private Float reminderDebit = null;

	@JsonProperty("reminderDeadline")

	private OffsetDateTime reminderDeadline = null;

	@JsonProperty("reminderCharge")

	private Float reminderCharge = null;

	@JsonProperty("addressParentName2")

	private String addressParentName2 = null;

	@JsonProperty("addressName2")

	private String addressName2 = null;

	@JsonProperty("taxSet")

	private ModelTaxSet taxSet = null;

	@JsonProperty("addressGender")

	private String addressGender = null;

	@JsonProperty("accountEndDate")

	private OffsetDateTime accountEndDate = null;

	@JsonProperty("address")

	private String address = null;

	@JsonProperty("currency")

	private String currency = null;

	@JsonProperty("sumNet")

	private Float sumNet = null;

	@JsonProperty("sumTax")

	private Float sumTax = null;

	@JsonProperty("sumGross")

	private Float sumGross = null;

	@JsonProperty("sumDiscounts")

	private Float sumDiscounts = null;

	@JsonProperty("sumNetForeignCurrency")

	private Float sumNetForeignCurrency = null;

	@JsonProperty("sumTaxForeignCurrency")

	private Float sumTaxForeignCurrency = null;

	@JsonProperty("sumGrossForeignCurrency")

	private Float sumGrossForeignCurrency = null;

	@JsonProperty("sumDiscountsForeignCurrency")

	private Float sumDiscountsForeignCurrency = null;

	@JsonProperty("sumNetAccounting")

	private Float sumNetAccounting = null;

	@JsonProperty("sumTaxAccounting")

	private Float sumTaxAccounting = null;

	@JsonProperty("sumGrossAccounting")

	private Float sumGrossAccounting = null;

	@JsonProperty("entryType")

	private ModelEntryType entryType = null;

	@JsonProperty("costumerInternalNote")

	private String costumerInternalNote = null;

	@JsonProperty("showNet")
	@JsonSerialize(using = NumericBooleanSerializer.class)
	@JsonDeserialize(using = NumericBooleanDeserializer.class)
	private Boolean showNet = null;

	@JsonProperty("enshrined")
	@JsonSerialize(using = NumericBooleanSerializer.class)
	@JsonDeserialize(using = NumericBooleanDeserializer.class)
	private Boolean enshrined = null;

	@JsonProperty("sendType")

	private String sendType = null;

	@JsonProperty("deliveryDateUntil")

	private OffsetDateTime deliveryDateUntil = null;

	public ModelInvoice invoiceNumber(String invoiceNumber)
	{
		this.invoiceNumber = invoiceNumber;
		return this;
	}



	/**
	 * Get invoiceNumber
	 *
	 * @return invoiceNumber
	 **/
	@Schema(description = "")
	public String getInvoiceNumber()
	{
		return invoiceNumber;
	}

	public void setInvoiceNumber(String invoiceNumber)
	{
		this.invoiceNumber = invoiceNumber;
	}

	public ModelInvoice contact(ModelContact contact)
	{
		this.contact = contact;
		return this;
	}



	/**
	 * Get contact
	 *
	 * @return contact
	 **/
	@Schema(description = "")
	public ModelContact getContact()
	{
		return contact;
	}

	public void setContact(ModelContact contact)
	{
		this.contact = contact;
	}

	public ModelInvoice create(OffsetDateTime create)
	{
		this.create = create;
		return this;
	}



	/**
	 * the date the invoice was created
	 *
	 * @return create
	 **/
	@Schema(description = "the date the invoice was created")
	public OffsetDateTime getCreate()
	{
		return create;
	}

	public void setCreate(OffsetDateTime create)
	{
		this.create = create;
	}

	public ModelInvoice update(OffsetDateTime update)
	{
		this.update = update;
		return this;
	}



	/**
	 * the date the invoice was last updated
	 *
	 * @return update
	 **/
	@Schema(description = "the date the invoice was last updated")
	public OffsetDateTime getUpdate()
	{
		return update;
	}

	public void setUpdate(OffsetDateTime update)
	{
		this.update = update;
	}

	public ModelInvoice invoiceDate(OffsetDateTime invoiceDate)
	{
		this.invoiceDate = invoiceDate;
		return this;
	}



	/**
	 * the date of the invoice
	 *
	 * @return invoiceDate
	 **/
	@Schema(description = "the date of the invoice")
	public OffsetDateTime getInvoiceDate()
	{
		return invoiceDate;
	}

	public void setInvoiceDate(OffsetDateTime invoiceDate)
	{
		this.invoiceDate = invoiceDate;
	}

	public ModelInvoice header(String header)
	{
		this.header = header;
		return this;
	}



	/**
	 * header/subject of the invoice
	 *
	 * @return header
	 **/
	@Schema(description = "header/subject of the invoice")
	public String getHeader()
	{
		return header;
	}

	public Integer getId()
	{
		return id;
	}

	public void setId(Integer id)
	{
		this.id = id;
	}

	public void setHeader(String header)
	{
		this.header = header;
	}

	public ModelInvoice headText(String headText)
	{
		this.headText = headText;
		return this;
	}



	/**
	 * head text of the invoice
	 *
	 * @return headText
	 **/
	@Schema(description = "head text of the invoice")
	public String getHeadText()
	{
		return headText;
	}

	public void setHeadText(String headText)
	{
		this.headText = headText;
	}

	public ModelInvoice footText(String footText)
	{
		this.footText = footText;
		return this;
	}



	/**
	 * foot text of the invoice
	 *
	 * @return footText
	 **/
	@Schema(description = "foot text of the invoice")
	public String getFootText()
	{
		return footText;
	}

	public void setFootText(String footText)
	{
		this.footText = footText;
	}

	public ModelInvoice timeToPay(OffsetDateTime timeToPay)
	{
		this.timeToPay = timeToPay;
		return this;
	}



	/**
	 * time left for paying the invoice, use format dd.MM.yyyy or number for number of days left
	 *
	 * @return timeToPay
	 **/
	@Schema(description = "time left for paying the invoice, use format dd.MM.yyyy or number for number of days left")
	public OffsetDateTime getTimeToPay()
	{
		return timeToPay;
	}

	public void setTimeToPay(OffsetDateTime timeToPay)
	{
		this.timeToPay = timeToPay;
	}

	public ModelInvoice discountTime(OffsetDateTime discountTime)
	{
		this.discountTime = discountTime;
		return this;
	}



	/**
	 * Get discountTime
	 *
	 * @return discountTime
	 **/
	@Schema(description = "")
	public OffsetDateTime getDiscountTime()
	{
		return discountTime;
	}

	public void setDiscountTime(OffsetDateTime discountTime)
	{
		this.discountTime = discountTime;
	}

	public ModelInvoice discount(Float discount)
	{
		this.discount = discount;
		return this;
	}



	/**
	 * the discount value in &#x27;%&#x27;
	 *
	 * @return discount
	 **/
	@Schema(description = "the discount value in '%'")
	public Float getDiscount()
	{
		return discount;
	}

	public void setDiscount(Float discount)
	{
		this.discount = discount;
	}

	public ModelInvoice addressName(String addressName)
	{
		this.addressName = addressName;
		return this;
	}



	/**
	 * the name in the address, equals the contacts name
	 *
	 * @return addressName
	 **/
	@Schema(description = "the name in the address, equals the contacts name")
	public String getAddressName()
	{
		return addressName;
	}

	public void setAddressName(String addressName)
	{
		this.addressName = addressName;
	}

	public ModelInvoice addressStreet(String addressStreet)
	{
		this.addressStreet = addressStreet;
		return this;
	}



	/**
	 * the street in the address, equals the contacts street
	 *
	 * @return addressStreet
	 **/
	@Schema(description = "the street in the address, equals the contacts street")
	public String getAddressStreet()
	{
		return addressStreet;
	}

	public void setAddressStreet(String addressStreet)
	{
		this.addressStreet = addressStreet;
	}

	public ModelInvoice addressZip(String addressZip)
	{
		this.addressZip = addressZip;
		return this;
	}



	/**
	 * the zip-code in the address, equals the contacts zip
	 *
	 * @return addressZip
	 **/
	@Schema(description = "the zip-code in the address, equals the contacts zip")
	public String getAddressZip()
	{
		return addressZip;
	}

	public void setAddressZip(String addressZip)
	{
		this.addressZip = addressZip;
	}

	public ModelInvoice addressCity(String addressCity)
	{
		this.addressCity = addressCity;
		return this;
	}



	/**
	 * the city in the address, equals the contacts city
	 *
	 * @return addressCity
	 **/
	@Schema(description = "the city in the address, equals the contacts city")
	public String getAddressCity()
	{
		return addressCity;
	}

	public void setAddressCity(String addressCity)
	{
		this.addressCity = addressCity;
	}

	public ModelInvoice addressCountry(ModelStaticCountry addressCountry)
	{
		this.addressCountry = addressCountry;
		return this;
	}



	/**
	 * Get addressCountry
	 *
	 * @return addressCountry
	 **/
	@Schema(description = "")
	public ModelStaticCountry getAddressCountry()
	{
		return addressCountry;
	}

	public void setAddressCountry(ModelStaticCountry addressCountry)
	{
		this.addressCountry = addressCountry;
	}

	public ModelInvoice payDate(OffsetDateTime payDate)
	{
		this.payDate = payDate;
		return this;
	}



	/**
	 * time left for paying the invoice, use format DD.MM.YYYY or number for number of days left
	 *
	 * @return payDate
	 **/
	@Schema(description = "time left for paying the invoice, use format DD.MM.YYYY or number for number of days left")
	public OffsetDateTime getPayDate()
	{
		return payDate;
	}

	public void setPayDate(OffsetDateTime payDate)
	{
		this.payDate = payDate;
	}

	public ModelInvoice createUser(ModelSevUser createUser)
	{
		this.createUser = createUser;
		return this;
	}



	/**
	 * Get createUser
	 *
	 * @return createUser
	 **/
	@Schema(description = "")
	public ModelSevUser getCreateUser()
	{
		return createUser;
	}

	public void setCreateUser(ModelSevUser createUser)
	{
		this.createUser = createUser;
	}

	public ModelInvoice sevClient(Object sevClient)
	{
		this.sevClient = sevClient;
		return this;
	}



	/**
	 * sevClient is the unique id every customer has and is used in nearly all operations
	 *
	 * @return sevClient
	 **/
	@Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
	public Object getSevClient()
	{
		return sevClient;
	}

	public void setSevClient(Object sevClient)
	{
		this.sevClient = sevClient;
	}

	public ModelInvoice deliveryDate(OffsetDateTime deliveryDate)
	{
		this.deliveryDate = deliveryDate;
		return this;
	}



	/**
	 * delivery date of the goods from the invoice, please use dd.MM.yyyy
	 *
	 * @return deliveryDate
	 **/
	@Schema(description = "delivery date of the goods from the invoice, please use dd.MM.yyyy")
	public OffsetDateTime getDeliveryDate()
	{
		return deliveryDate;
	}

	public void setDeliveryDate(OffsetDateTime deliveryDate)
	{
		this.deliveryDate = deliveryDate;
	}

	public ModelInvoice status(Integer status)
	{
		this.status = status;
		return this;
	}



	/**
	 * status of the invoice
	 *
	 * @return status
	 **/
	@Schema(description = "status of the invoice")
	public Integer getStatus()
	{
		return status;
	}

	public void setStatus(Integer status)
	{
		this.status = status;
	}

	public ModelInvoice smallSettlement(Boolean smallSettlement)
	{
		this.smallSettlement = smallSettlement;
		return this;
	}



	/**
	 * Get smallSettlement
	 *
	 * @return smallSettlement
	 **/
	@Schema(description = "")
	public Boolean isSmallSettlement()
	{
		return smallSettlement;
	}

	public void setSmallSettlement(Boolean smallSettlement)
	{
		this.smallSettlement = smallSettlement;
	}

	public ModelInvoice contactPerson(ModelSevUser contactPerson)
	{
		this.contactPerson = contactPerson;
		return this;
	}



	/**
	 * Get contactPerson
	 *
	 * @return contactPerson
	 **/
	@Schema(description = "")
	public ModelSevUser getContactPerson()
	{
		return contactPerson;
	}

	public void setContactPerson(ModelSevUser contactPerson)
	{
		this.contactPerson = contactPerson;
	}

	public ModelInvoice taxRate(Float taxRate)
	{
		this.taxRate = taxRate;
		return this;
	}



	/**
	 * tax rate used when adding a value added tax regulation
	 * minimum: 0
	 * maximum: 100
	 *
	 * @return taxRate
	 **/
	@Schema(description = "tax rate used when adding a value added tax regulation")
	public Float getTaxRate()
	{
		return taxRate;
	}

	public void setTaxRate(Float taxRate)
	{
		this.taxRate = taxRate;
	}

	public ModelInvoice taxText(TaxTextEnum taxText)
	{
		this.taxText = taxText;
		return this;
	}



	/**
	 * additional text when adding a value added tax regulation
	 *
	 * @return taxText
	 **/
	@Schema(description = "additional text when adding a value added tax regulation")
	public TaxTextEnum getTaxText()
	{
		return taxText;
	}

	public void setTaxText(TaxTextEnum taxText)
	{
		this.taxText = taxText;
	}

	public ModelInvoice dunningLevel(Integer dunningLevel)
	{
		this.dunningLevel = dunningLevel;
		return this;
	}



	/**
	 * dunning level of the invoice
	 *
	 * @return dunningLevel
	 **/
	@Schema(description = "dunning level of the invoice")
	public Integer getDunningLevel()
	{
		return dunningLevel;
	}

	public void setDunningLevel(Integer dunningLevel)
	{
		this.dunningLevel = dunningLevel;
	}

	public ModelInvoice addressParentName(String addressParentName)
	{
		this.addressParentName = addressParentName;
		return this;
	}



	/**
	 * name of the contacts address
	 *
	 * @return addressParentName
	 **/
	@Schema(description = "name of the contacts address")
	public String getAddressParentName()
	{
		return addressParentName;
	}

	public void setAddressParentName(String addressParentName)
	{
		this.addressParentName = addressParentName;
	}

	public ModelInvoice addressContactRef(ModelContactAddress addressContactRef)
	{
		this.addressContactRef = addressContactRef;
		return this;
	}



	/**
	 * Get addressContactRef
	 *
	 * @return addressContactRef
	 **/
	@Schema(description = "")
	public ModelContactAddress getAddressContactRef()
	{
		return addressContactRef;
	}

	public void setAddressContactRef(ModelContactAddress addressContactRef)
	{
		this.addressContactRef = addressContactRef;
	}

	public ModelInvoice taxType(TaxTypeEnum taxType)
	{
		this.taxType = taxType;
		return this;
	}



	/**
	 * Get taxType
	 *
	 * @return taxType
	 **/
	@Schema(description = "")
	public TaxTypeEnum getTaxType()
	{
		return taxType;
	}

	public void setTaxType(TaxTypeEnum taxType)
	{
		this.taxType = taxType;
	}

	public ModelInvoice paymentMethod(ModelPaymentMethod paymentMethod)
	{
		this.paymentMethod = paymentMethod;
		return this;
	}



	/**
	 * Get paymentMethod
	 *
	 * @return paymentMethod
	 **/
	@Schema(description = "")
	public ModelPaymentMethod getPaymentMethod()
	{
		return paymentMethod;
	}

	public void setPaymentMethod(ModelPaymentMethod paymentMethod)
	{
		this.paymentMethod = paymentMethod;
	}

	public ModelInvoice costCentre(ModelCostCentre costCentre)
	{
		this.costCentre = costCentre;
		return this;
	}



	/**
	 * Get costCentre
	 *
	 * @return costCentre
	 **/
	@Schema(description = "")
	public ModelCostCentre getCostCentre()
	{
		return costCentre;
	}

	public void setCostCentre(ModelCostCentre costCentre)
	{
		this.costCentre = costCentre;
	}

	public ModelInvoice sendDate(OffsetDateTime sendDate)
	{
		this.sendDate = sendDate;
		return this;
	}



	/**
	 * Get sendDate
	 *
	 * @return sendDate
	 **/
	@Schema(description = "")
	public OffsetDateTime getSendDate()
	{
		return sendDate;
	}

	public void setSendDate(OffsetDateTime sendDate)
	{
		this.sendDate = sendDate;
	}

	public ModelInvoice origin(Object origin)
	{
		this.origin = origin;
		return this;
	}



	/**
	 * Get origin
	 *
	 * @return origin
	 **/
	@Schema(description = "")
	public Object getOrigin()
	{
		return origin;
	}

	public void setOrigin(Object origin)
	{
		this.origin = origin;
	}

	public ModelInvoice invoiceType(InvoiceTypeEnum invoiceType)
	{
		this.invoiceType = invoiceType;
		return this;
	}



	/**
	 * type of the invoice
	 *
	 * @return invoiceType
	 **/
	@Schema(description = "type of the invoice")
	public InvoiceTypeEnum getInvoiceType()
	{
		return invoiceType;
	}

	public void setInvoiceType(InvoiceTypeEnum invoiceType)
	{
		this.invoiceType = invoiceType;
	}

	public ModelInvoice accountIntervall(Integer accountIntervall)
	{
		this.accountIntervall = accountIntervall;
		return this;
	}



	/**
	 * Get accountIntervall
	 *
	 * @return accountIntervall
	 **/
	@Schema(description = "")
	public Integer getAccountIntervall()
	{
		return accountIntervall;
	}

	public void setAccountIntervall(Integer accountIntervall)
	{
		this.accountIntervall = accountIntervall;
	}

	public ModelInvoice accountLastInvoice(OffsetDateTime accountLastInvoice)
	{
		this.accountLastInvoice = accountLastInvoice;
		return this;
	}



	/**
	 * Get accountLastInvoice
	 *
	 * @return accountLastInvoice
	 **/
	@Schema(description = "")
	public OffsetDateTime getAccountLastInvoice()
	{
		return accountLastInvoice;
	}

	public void setAccountLastInvoice(OffsetDateTime accountLastInvoice)
	{
		this.accountLastInvoice = accountLastInvoice;
	}

	public ModelInvoice accountNextInvoice(OffsetDateTime accountNextInvoice)
	{
		this.accountNextInvoice = accountNextInvoice;
		return this;
	}



	/**
	 * Get accountNextInvoice
	 *
	 * @return accountNextInvoice
	 **/
	@Schema(description = "")
	public OffsetDateTime getAccountNextInvoice()
	{
		return accountNextInvoice;
	}

	public void setAccountNextInvoice(OffsetDateTime accountNextInvoice)
	{
		this.accountNextInvoice = accountNextInvoice;
	}

	public ModelInvoice reminderTotal(Float reminderTotal)
	{
		this.reminderTotal = reminderTotal;
		return this;
	}



	/**
	 * Get reminderTotal
	 *
	 * @return reminderTotal
	 **/
	@Schema(description = "")
	public Float getReminderTotal()
	{
		return reminderTotal;
	}

	public void setReminderTotal(Float reminderTotal)
	{
		this.reminderTotal = reminderTotal;
	}

	public ModelInvoice reminderDebit(Float reminderDebit)
	{
		this.reminderDebit = reminderDebit;
		return this;
	}



	/**
	 * Get reminderDebit
	 *
	 * @return reminderDebit
	 **/
	@Schema(description = "")
	public Float getReminderDebit()
	{
		return reminderDebit;
	}

	public void setReminderDebit(Float reminderDebit)
	{
		this.reminderDebit = reminderDebit;
	}

	public ModelInvoice reminderDeadline(OffsetDateTime reminderDeadline)
	{
		this.reminderDeadline = reminderDeadline;
		return this;
	}



	/**
	 * Get reminderDeadline
	 *
	 * @return reminderDeadline
	 **/
	@Schema(description = "")
	public OffsetDateTime getReminderDeadline()
	{
		return reminderDeadline;
	}

	public void setReminderDeadline(OffsetDateTime reminderDeadline)
	{
		this.reminderDeadline = reminderDeadline;
	}

	public ModelInvoice reminderCharge(Float reminderCharge)
	{
		this.reminderCharge = reminderCharge;
		return this;
	}



	/**
	 * Get reminderCharge
	 *
	 * @return reminderCharge
	 **/
	@Schema(description = "")
	public Float getReminderCharge()
	{
		return reminderCharge;
	}

	public void setReminderCharge(Float reminderCharge)
	{
		this.reminderCharge = reminderCharge;
	}

	public ModelInvoice addressParentName2(String addressParentName2)
	{
		this.addressParentName2 = addressParentName2;
		return this;
	}



	/**
	 * Get addressParentName2
	 *
	 * @return addressParentName2
	 **/
	@Schema(description = "")
	public String getAddressParentName2()
	{
		return addressParentName2;
	}

	public void setAddressParentName2(String addressParentName2)
	{
		this.addressParentName2 = addressParentName2;
	}

	public ModelInvoice addressName2(String addressName2)
	{
		this.addressName2 = addressName2;
		return this;
	}



	/**
	 * Get addressName2
	 *
	 * @return addressName2
	 **/
	@Schema(description = "")
	public String getAddressName2()
	{
		return addressName2;
	}

	public void setAddressName2(String addressName2)
	{
		this.addressName2 = addressName2;
	}

	public ModelInvoice taxSet(ModelTaxSet taxSet)
	{
		this.taxSet = taxSet;
		return this;
	}



	/**
	 * Get taxSet
	 *
	 * @return taxSet
	 **/
	@Schema(description = "")
	public ModelTaxSet getTaxSet()
	{
		return taxSet;
	}

	public void setTaxSet(ModelTaxSet taxSet)
	{
		this.taxSet = taxSet;
	}

	public ModelInvoice addressGender(String addressGender)
	{
		this.addressGender = addressGender;
		return this;
	}



	/**
	 * Get addressGender
	 *
	 * @return addressGender
	 **/
	@Schema(description = "")
	public String getAddressGender()
	{
		return addressGender;
	}

	public void setAddressGender(String addressGender)
	{
		this.addressGender = addressGender;
	}

	public ModelInvoice accountEndDate(OffsetDateTime accountEndDate)
	{
		this.accountEndDate = accountEndDate;
		return this;
	}



	/**
	 * Get accountEndDate
	 *
	 * @return accountEndDate
	 **/
	@Schema(description = "")
	public OffsetDateTime getAccountEndDate()
	{
		return accountEndDate;
	}

	public void setAccountEndDate(OffsetDateTime accountEndDate)
	{
		this.accountEndDate = accountEndDate;
	}

	public ModelInvoice address(String address)
	{
		this.address = address;
		return this;
	}



	/**
	 * Get address
	 *
	 * @return address
	 **/
	@Schema(description = "")
	public String getAddress()
	{
		return address;
	}

	public void setAddress(String address)
	{
		this.address = address;
	}

	public ModelInvoice currency(String currency)
	{
		this.currency = currency;
		return this;
	}



	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@Schema(description = "")
	public String getCurrency()
	{
		return currency;
	}

	public void setCurrency(String currency)
	{
		this.currency = currency;
	}

	public ModelInvoice sumNet(Float sumNet)
	{
		this.sumNet = sumNet;
		return this;
	}



	/**
	 * Get sumNet
	 *
	 * @return sumNet
	 **/
	@Schema(description = "")
	public Float getSumNet()
	{
		return sumNet;
	}

	public void setSumNet(Float sumNet)
	{
		this.sumNet = sumNet;
	}

	public ModelInvoice sumTax(Float sumTax)
	{
		this.sumTax = sumTax;
		return this;
	}



	/**
	 * Get sumTax
	 *
	 * @return sumTax
	 **/
	@Schema(description = "")
	public Float getSumTax()
	{
		return sumTax;
	}

	public void setSumTax(Float sumTax)
	{
		this.sumTax = sumTax;
	}

	public ModelInvoice sumGross(Float sumGross)
	{
		this.sumGross = sumGross;
		return this;
	}



	/**
	 * Get sumGross
	 *
	 * @return sumGross
	 **/
	@Schema(description = "")
	public Float getSumGross()
	{
		return sumGross;
	}

	public void setSumGross(Float sumGross)
	{
		this.sumGross = sumGross;
	}

	public ModelInvoice sumDiscounts(Float sumDiscounts)
	{
		this.sumDiscounts = sumDiscounts;
		return this;
	}



	/**
	 * Get sumDiscounts
	 *
	 * @return sumDiscounts
	 **/
	@Schema(description = "")
	public Float getSumDiscounts()
	{
		return sumDiscounts;
	}

	public void setSumDiscounts(Float sumDiscounts)
	{
		this.sumDiscounts = sumDiscounts;
	}

	public ModelInvoice sumNetForeignCurrency(Float sumNetForeignCurrency)
	{
		this.sumNetForeignCurrency = sumNetForeignCurrency;
		return this;
	}



	/**
	 * Get sumNetForeignCurrency
	 *
	 * @return sumNetForeignCurrency
	 **/
	@Schema(description = "")
	public Float getSumNetForeignCurrency()
	{
		return sumNetForeignCurrency;
	}

	public void setSumNetForeignCurrency(Float sumNetForeignCurrency)
	{
		this.sumNetForeignCurrency = sumNetForeignCurrency;
	}

	public ModelInvoice sumTaxForeignCurrency(Float sumTaxForeignCurrency)
	{
		this.sumTaxForeignCurrency = sumTaxForeignCurrency;
		return this;
	}



	/**
	 * Get sumTaxForeignCurrency
	 *
	 * @return sumTaxForeignCurrency
	 **/
	@Schema(description = "")
	public Float getSumTaxForeignCurrency()
	{
		return sumTaxForeignCurrency;
	}

	public void setSumTaxForeignCurrency(Float sumTaxForeignCurrency)
	{
		this.sumTaxForeignCurrency = sumTaxForeignCurrency;
	}

	public ModelInvoice sumGrossForeignCurrency(Float sumGrossForeignCurrency)
	{
		this.sumGrossForeignCurrency = sumGrossForeignCurrency;
		return this;
	}



	/**
	 * Get sumGrossForeignCurrency
	 *
	 * @return sumGrossForeignCurrency
	 **/
	@Schema(description = "")
	public Float getSumGrossForeignCurrency()
	{
		return sumGrossForeignCurrency;
	}

	public void setSumGrossForeignCurrency(Float sumGrossForeignCurrency)
	{
		this.sumGrossForeignCurrency = sumGrossForeignCurrency;
	}

	public ModelInvoice sumDiscountsForeignCurrency(Float sumDiscountsForeignCurrency)
	{
		this.sumDiscountsForeignCurrency = sumDiscountsForeignCurrency;
		return this;
	}



	/**
	 * Get sumDiscountsForeignCurrency
	 *
	 * @return sumDiscountsForeignCurrency
	 **/
	@Schema(description = "")
	public Float getSumDiscountsForeignCurrency()
	{
		return sumDiscountsForeignCurrency;
	}

	public void setSumDiscountsForeignCurrency(Float sumDiscountsForeignCurrency)
	{
		this.sumDiscountsForeignCurrency = sumDiscountsForeignCurrency;
	}

	public ModelInvoice sumNetAccounting(Float sumNetAccounting)
	{
		this.sumNetAccounting = sumNetAccounting;
		return this;
	}



	/**
	 * Get sumNetAccounting
	 *
	 * @return sumNetAccounting
	 **/
	@Schema(description = "")
	public Float getSumNetAccounting()
	{
		return sumNetAccounting;
	}

	public void setSumNetAccounting(Float sumNetAccounting)
	{
		this.sumNetAccounting = sumNetAccounting;
	}

	public ModelInvoice sumTaxAccounting(Float sumTaxAccounting)
	{
		this.sumTaxAccounting = sumTaxAccounting;
		return this;
	}



	/**
	 * Get sumTaxAccounting
	 *
	 * @return sumTaxAccounting
	 **/
	@Schema(description = "")
	public Float getSumTaxAccounting()
	{
		return sumTaxAccounting;
	}

	public void setSumTaxAccounting(Float sumTaxAccounting)
	{
		this.sumTaxAccounting = sumTaxAccounting;
	}

	public ModelInvoice sumGrossAccounting(Float sumGrossAccounting)
	{
		this.sumGrossAccounting = sumGrossAccounting;
		return this;
	}



	/**
	 * Get sumGrossAccounting
	 *
	 * @return sumGrossAccounting
	 **/
	@Schema(description = "")
	public Float getSumGrossAccounting()
	{
		return sumGrossAccounting;
	}

	public void setSumGrossAccounting(Float sumGrossAccounting)
	{
		this.sumGrossAccounting = sumGrossAccounting;
	}

	public ModelInvoice entryType(ModelEntryType entryType)
	{
		this.entryType = entryType;
		return this;
	}



	/**
	 * Get entryType
	 *
	 * @return entryType
	 **/
	@Schema(description = "")
	public ModelEntryType getEntryType()
	{
		return entryType;
	}

	public void setEntryType(ModelEntryType entryType)
	{
		this.entryType = entryType;
	}

	public ModelInvoice costumerInternalNote(String costumerInternalNote)
	{
		this.costumerInternalNote = costumerInternalNote;
		return this;
	}



	/**
	 * Get costumerInternalNote
	 *
	 * @return costumerInternalNote
	 **/
	@Schema(description = "")
	public String getCostumerInternalNote()
	{
		return costumerInternalNote;
	}

	public void setCostumerInternalNote(String costumerInternalNote)
	{
		this.costumerInternalNote = costumerInternalNote;
	}

	public ModelInvoice showNet(Boolean showNet)
	{
		this.showNet = showNet;
		return this;
	}



	/**
	 * Get showNet
	 *
	 * @return showNet
	 **/
	@Schema(description = "")
	public Boolean isShowNet()
	{
		return showNet;
	}

	public void setShowNet(Boolean showNet)
	{
		this.showNet = showNet;
	}

	public ModelInvoice enshrined(Boolean enshrined)
	{
		this.enshrined = enshrined;
		return this;
	}



	/**
	 * Get enshrined
	 *
	 * @return enshrined
	 **/
	@Schema(description = "")
	public Boolean isEnshrined()
	{
		return enshrined;
	}

	public void setEnshrined(Boolean enshrined)
	{
		this.enshrined = enshrined;
	}

	public ModelInvoice sendType(String sendType)
	{
		this.sendType = sendType;
		return this;
	}



	/**
	 * Get sendType
	 *
	 * @return sendType
	 **/
	@Schema(description = "")
	public String getSendType()
	{
		return sendType;
	}

	public void setSendType(String sendType)
	{
		this.sendType = sendType;
	}

	public ModelInvoice deliveryDateUntil(OffsetDateTime deliveryDateUntil)
	{
		this.deliveryDateUntil = deliveryDateUntil;
		return this;
	}



	/**
	 * Get deliveryDateUntil
	 *
	 * @return deliveryDateUntil
	 **/
	@Schema(description = "")
	public OffsetDateTime getDeliveryDateUntil()
	{
		return deliveryDateUntil;
	}

	public void setDeliveryDateUntil(OffsetDateTime deliveryDateUntil)
	{
		this.deliveryDateUntil = deliveryDateUntil;
	}

	@Override
	public boolean equals(java.lang.Object o)
	{
		if (this == o)
		{
			return true;
		}
		if (o == null || getClass() != o.getClass())
		{
			return false;
		}
		ModelInvoice modelInvoice = (ModelInvoice) o;
		return Objects.equals(this.invoiceNumber, modelInvoice.invoiceNumber) &&
				Objects.equals(this.contact, modelInvoice.contact) &&
				Objects.equals(this.create, modelInvoice.create) &&
				Objects.equals(this.update, modelInvoice.update) &&
				Objects.equals(this.invoiceDate, modelInvoice.invoiceDate) &&
				Objects.equals(this.header, modelInvoice.header) &&
				Objects.equals(this.headText, modelInvoice.headText) &&
				Objects.equals(this.footText, modelInvoice.footText) &&
				Objects.equals(this.timeToPay, modelInvoice.timeToPay) &&
				Objects.equals(this.discountTime, modelInvoice.discountTime) &&
				Objects.equals(this.discount, modelInvoice.discount) &&
				Objects.equals(this.addressName, modelInvoice.addressName) &&
				Objects.equals(this.addressStreet, modelInvoice.addressStreet) &&
				Objects.equals(this.addressZip, modelInvoice.addressZip) &&
				Objects.equals(this.addressCity, modelInvoice.addressCity) &&
				Objects.equals(this.addressCountry, modelInvoice.addressCountry) &&
				Objects.equals(this.payDate, modelInvoice.payDate) &&
				Objects.equals(this.createUser, modelInvoice.createUser) &&
				Objects.equals(this.sevClient, modelInvoice.sevClient) &&
				Objects.equals(this.deliveryDate, modelInvoice.deliveryDate) &&
				Objects.equals(this.status, modelInvoice.status) &&
				Objects.equals(this.smallSettlement, modelInvoice.smallSettlement) &&
				Objects.equals(this.contactPerson, modelInvoice.contactPerson) &&
				Objects.equals(this.taxRate, modelInvoice.taxRate) &&
				Objects.equals(this.taxText, modelInvoice.taxText) &&
				Objects.equals(this.dunningLevel, modelInvoice.dunningLevel) &&
				Objects.equals(this.addressParentName, modelInvoice.addressParentName) &&
				Objects.equals(this.addressContactRef, modelInvoice.addressContactRef) &&
				Objects.equals(this.taxType, modelInvoice.taxType) &&
				Objects.equals(this.paymentMethod, modelInvoice.paymentMethod) &&
				Objects.equals(this.costCentre, modelInvoice.costCentre) &&
				Objects.equals(this.sendDate, modelInvoice.sendDate) &&
				Objects.equals(this.origin, modelInvoice.origin) &&
				Objects.equals(this.invoiceType, modelInvoice.invoiceType) &&
				Objects.equals(this.accountIntervall, modelInvoice.accountIntervall) &&
				Objects.equals(this.accountLastInvoice, modelInvoice.accountLastInvoice) &&
				Objects.equals(this.accountNextInvoice, modelInvoice.accountNextInvoice) &&
				Objects.equals(this.reminderTotal, modelInvoice.reminderTotal) &&
				Objects.equals(this.reminderDebit, modelInvoice.reminderDebit) &&
				Objects.equals(this.reminderDeadline, modelInvoice.reminderDeadline) &&
				Objects.equals(this.reminderCharge, modelInvoice.reminderCharge) &&
				Objects.equals(this.addressParentName2, modelInvoice.addressParentName2) &&
				Objects.equals(this.addressName2, modelInvoice.addressName2) &&
				Objects.equals(this.taxSet, modelInvoice.taxSet) &&
				Objects.equals(this.addressGender, modelInvoice.addressGender) &&
				Objects.equals(this.accountEndDate, modelInvoice.accountEndDate) &&
				Objects.equals(this.address, modelInvoice.address) &&
				Objects.equals(this.currency, modelInvoice.currency) &&
				Objects.equals(this.sumNet, modelInvoice.sumNet) &&
				Objects.equals(this.sumTax, modelInvoice.sumTax) &&
				Objects.equals(this.sumGross, modelInvoice.sumGross) &&
				Objects.equals(this.sumDiscounts, modelInvoice.sumDiscounts) &&
				Objects.equals(this.sumNetForeignCurrency, modelInvoice.sumNetForeignCurrency) &&
				Objects.equals(this.sumTaxForeignCurrency, modelInvoice.sumTaxForeignCurrency) &&
				Objects.equals(this.sumGrossForeignCurrency, modelInvoice.sumGrossForeignCurrency) &&
				Objects.equals(this.sumDiscountsForeignCurrency, modelInvoice.sumDiscountsForeignCurrency) &&
				Objects.equals(this.sumNetAccounting, modelInvoice.sumNetAccounting) &&
				Objects.equals(this.sumTaxAccounting, modelInvoice.sumTaxAccounting) &&
				Objects.equals(this.sumGrossAccounting, modelInvoice.sumGrossAccounting) &&
				Objects.equals(this.entryType, modelInvoice.entryType) &&
				Objects.equals(this.costumerInternalNote, modelInvoice.costumerInternalNote) &&
				Objects.equals(this.showNet, modelInvoice.showNet) &&
				Objects.equals(this.enshrined, modelInvoice.enshrined) &&
				Objects.equals(this.sendType, modelInvoice.sendType) &&
				Objects.equals(this.deliveryDateUntil, modelInvoice.deliveryDateUntil);
	}

	@Override
	public int hashCode()
	{
		return java.util.Objects
				.hash(invoiceNumber, contact, create, update, invoiceDate, header, headText, footText, timeToPay, discountTime,
						discount, addressName, addressStreet, addressZip, addressCity, addressCountry, payDate, createUser, sevClient,
						deliveryDate, status, smallSettlement, contactPerson, taxRate, taxText, dunningLevel, addressParentName,
						addressContactRef, taxType, paymentMethod, costCentre, sendDate, origin, invoiceType, accountIntervall,
						accountLastInvoice, accountNextInvoice, reminderTotal, reminderDebit, reminderDeadline, reminderCharge,
						addressParentName2, addressName2, taxSet, addressGender, accountEndDate, address, currency, sumNet, sumTax,
						sumGross, sumDiscounts, sumNetForeignCurrency, sumTaxForeignCurrency, sumGrossForeignCurrency,
						sumDiscountsForeignCurrency, sumNetAccounting, sumTaxAccounting, sumGrossAccounting, entryType,
						costumerInternalNote, showNet, enshrined, sendType, deliveryDateUntil);
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		sb.append("class ModelInvoice {\n");

		sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
		sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
		sb.append("    create: ").append(toIndentedString(create)).append("\n");
		sb.append("    update: ").append(toIndentedString(update)).append("\n");
		sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
		sb.append("    header: ").append(toIndentedString(header)).append("\n");
		sb.append("    headText: ").append(toIndentedString(headText)).append("\n");
		sb.append("    footText: ").append(toIndentedString(footText)).append("\n");
		sb.append("    timeToPay: ").append(toIndentedString(timeToPay)).append("\n");
		sb.append("    discountTime: ").append(toIndentedString(discountTime)).append("\n");
		sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
		sb.append("    addressName: ").append(toIndentedString(addressName)).append("\n");
		sb.append("    addressStreet: ").append(toIndentedString(addressStreet)).append("\n");
		sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
		sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
		sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
		sb.append("    payDate: ").append(toIndentedString(payDate)).append("\n");
		sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
		sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
		sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    smallSettlement: ").append(toIndentedString(smallSettlement)).append("\n");
		sb.append("    contactPerson: ").append(toIndentedString(contactPerson)).append("\n");
		sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
		sb.append("    taxText: ").append(toIndentedString(taxText)).append("\n");
		sb.append("    dunningLevel: ").append(toIndentedString(dunningLevel)).append("\n");
		sb.append("    addressParentName: ").append(toIndentedString(addressParentName)).append("\n");
		sb.append("    addressContactRef: ").append(toIndentedString(addressContactRef)).append("\n");
		sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
		sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
		sb.append("    costCentre: ").append(toIndentedString(costCentre)).append("\n");
		sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
		sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
		sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
		sb.append("    accountIntervall: ").append(toIndentedString(accountIntervall)).append("\n");
		sb.append("    accountLastInvoice: ").append(toIndentedString(accountLastInvoice)).append("\n");
		sb.append("    accountNextInvoice: ").append(toIndentedString(accountNextInvoice)).append("\n");
		sb.append("    reminderTotal: ").append(toIndentedString(reminderTotal)).append("\n");
		sb.append("    reminderDebit: ").append(toIndentedString(reminderDebit)).append("\n");
		sb.append("    reminderDeadline: ").append(toIndentedString(reminderDeadline)).append("\n");
		sb.append("    reminderCharge: ").append(toIndentedString(reminderCharge)).append("\n");
		sb.append("    addressParentName2: ").append(toIndentedString(addressParentName2)).append("\n");
		sb.append("    addressName2: ").append(toIndentedString(addressName2)).append("\n");
		sb.append("    taxSet: ").append(toIndentedString(taxSet)).append("\n");
		sb.append("    addressGender: ").append(toIndentedString(addressGender)).append("\n");
		sb.append("    accountEndDate: ").append(toIndentedString(accountEndDate)).append("\n");
		sb.append("    address: ").append(toIndentedString(address)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    sumNet: ").append(toIndentedString(sumNet)).append("\n");
		sb.append("    sumTax: ").append(toIndentedString(sumTax)).append("\n");
		sb.append("    sumGross: ").append(toIndentedString(sumGross)).append("\n");
		sb.append("    sumDiscounts: ").append(toIndentedString(sumDiscounts)).append("\n");
		sb.append("    sumNetForeignCurrency: ").append(toIndentedString(sumNetForeignCurrency)).append("\n");
		sb.append("    sumTaxForeignCurrency: ").append(toIndentedString(sumTaxForeignCurrency)).append("\n");
		sb.append("    sumGrossForeignCurrency: ").append(toIndentedString(sumGrossForeignCurrency)).append("\n");
		sb.append("    sumDiscountsForeignCurrency: ").append(toIndentedString(sumDiscountsForeignCurrency)).append("\n");
		sb.append("    sumNetAccounting: ").append(toIndentedString(sumNetAccounting)).append("\n");
		sb.append("    sumTaxAccounting: ").append(toIndentedString(sumTaxAccounting)).append("\n");
		sb.append("    sumGrossAccounting: ").append(toIndentedString(sumGrossAccounting)).append("\n");
		sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
		sb.append("    costumerInternalNote: ").append(toIndentedString(costumerInternalNote)).append("\n");
		sb.append("    showNet: ").append(toIndentedString(showNet)).append("\n");
		sb.append("    enshrined: ").append(toIndentedString(enshrined)).append("\n");
		sb.append("    sendType: ").append(toIndentedString(sendType)).append("\n");
		sb.append("    deliveryDateUntil: ").append(toIndentedString(deliveryDateUntil)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o)
	{
		if (o == null)
		{
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
