/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelCategory;
import de.wichmann.sevdesk.model.ModelEntryType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelCategory
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:13:41.764+02:00[Europe/Berlin]")public class ModelCategory {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("parent")

  private ModelCategory parent = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("objectType")

  private String objectType = null;

  @JsonProperty("priority")

  private Integer priority = null;

  @JsonProperty("code")

  private String code = null;

  @JsonProperty("color")

  private String color = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("postingAccount")

  private String postingAccount = null;

  @JsonProperty("type")

  private String type = null;

  @JsonProperty("translationCode")

  private String translationCode = null;

  @JsonProperty("entryType")

  private ModelEntryType entryType = null;
  public ModelCategory create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * creation date of the category
  * @return create
  **/
  @Schema(description = "creation date of the category")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelCategory update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the category was last updated
  * @return update
  **/
  @Schema(description = "date the category was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelCategory parent(ModelCategory parent) {
    this.parent = parent;
    return this;
  }

  

  /**
  * Get parent
  * @return parent
  **/
  @Schema(description = "")
  public ModelCategory getParent() {
    return parent;
  }
  public void setParent(ModelCategory parent) {
    this.parent = parent;
  }
  public ModelCategory name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelCategory objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  

  /**
  * Get objectType
  * @return objectType
  **/
  @Schema(description = "")
  public String getObjectType() {
    return objectType;
  }
  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }
  public ModelCategory priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  

  /**
  * Get priority
  * @return priority
  **/
  @Schema(description = "")
  public Integer getPriority() {
    return priority;
  }
  public void setPriority(Integer priority) {
    this.priority = priority;
  }
  public ModelCategory code(String code) {
    this.code = code;
    return this;
  }

  

  /**
  * Get code
  * @return code
  **/
  @Schema(description = "")
  public String getCode() {
    return code;
  }
  public void setCode(String code) {
    this.code = code;
  }
  public ModelCategory color(String color) {
    this.color = color;
    return this;
  }

  

  /**
  * Get color
  * @return color
  **/
  @Schema(description = "")
  public String getColor() {
    return color;
  }
  public void setColor(String color) {
    this.color = color;
  }
  public ModelCategory sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * Get sevClient
  * @return sevClient
  **/
  @Schema(description = "")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelCategory postingAccount(String postingAccount) {
    this.postingAccount = postingAccount;
    return this;
  }

  

  /**
  * Get postingAccount
  * @return postingAccount
  **/
  @Schema(description = "")
  public String getPostingAccount() {
    return postingAccount;
  }
  public void setPostingAccount(String postingAccount) {
    this.postingAccount = postingAccount;
  }
  public ModelCategory type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  public ModelCategory translationCode(String translationCode) {
    this.translationCode = translationCode;
    return this;
  }

  

  /**
  * Get translationCode
  * @return translationCode
  **/
  @Schema(description = "")
  public String getTranslationCode() {
    return translationCode;
  }
  public void setTranslationCode(String translationCode) {
    this.translationCode = translationCode;
  }
  public ModelCategory entryType(ModelEntryType entryType) {
    this.entryType = entryType;
    return this;
  }

  

  /**
  * Get entryType
  * @return entryType
  **/
  @Schema(description = "")
  public ModelEntryType getEntryType() {
    return entryType;
  }
  public void setEntryType(ModelEntryType entryType) {
    this.entryType = entryType;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelCategory modelCategory = (ModelCategory) o;
    return Objects.equals(this.create, modelCategory.create) &&
        Objects.equals(this.update, modelCategory.update) &&
        Objects.equals(this.parent, modelCategory.parent) &&
        Objects.equals(this.name, modelCategory.name) &&
        Objects.equals(this.objectType, modelCategory.objectType) &&
        Objects.equals(this.priority, modelCategory.priority) &&
        Objects.equals(this.code, modelCategory.code) &&
        Objects.equals(this.color, modelCategory.color) &&
        Objects.equals(this.sevClient, modelCategory.sevClient) &&
        Objects.equals(this.postingAccount, modelCategory.postingAccount) &&
        Objects.equals(this.type, modelCategory.type) &&
        Objects.equals(this.translationCode, modelCategory.translationCode) &&
        Objects.equals(this.entryType, modelCategory.entryType);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, parent, name, objectType, priority, code, color, sevClient, postingAccount, type, translationCode, entryType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelCategory {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    postingAccount: ").append(toIndentedString(postingAccount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    translationCode: ").append(toIndentedString(translationCode)).append("\n");
    sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
