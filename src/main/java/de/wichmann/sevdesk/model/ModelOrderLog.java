/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelOrder;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelOrderLog
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelOrderLog {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("date")

  private OffsetDateTime date = null;

  @JsonProperty("order")

  private ModelOrder order = null;

  @JsonProperty("object")

  private Object object = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("currency")

  private String currency = null;

  @JsonProperty("amount")

  private Float amount = null;

  @JsonProperty("amountType")

  private String amountType = null;

  @JsonProperty("taxRate")

  private Integer taxRate = null;
  public ModelOrderLog create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the order log was created
  * @return create
  **/
  @Schema(description = "date the order log was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelOrderLog update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the order was last updated
  * @return update
  **/
  @Schema(description = "date the order was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelOrderLog date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  

  /**
  * date of the order log
  * @return date
  **/
  @Schema(description = "date of the order log")
  public OffsetDateTime getDate() {
    return date;
  }
  public void setDate(OffsetDateTime date) {
    this.date = date;
  }
  public ModelOrderLog order(ModelOrder order) {
    this.order = order;
    return this;
  }

  

  /**
  * Get order
  * @return order
  **/
  @Schema(description = "")
  public ModelOrder getOrder() {
    return order;
  }
  public void setOrder(ModelOrder order) {
    this.order = order;
  }
  public ModelOrderLog object(Object object) {
    this.object = object;
    return this;
  }

  

  /**
  * the object which was involved in the logged order action (eg. a created invoice)
  * @return object
  **/
  @Schema(description = "the object which was involved in the logged order action (eg. a created invoice)")
  public Object getObject() {
    return object;
  }
  public void setObject(Object object) {
    this.object = object;
  }
  public ModelOrderLog sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelOrderLog currency(String currency) {
    this.currency = currency;
    return this;
  }

  

  /**
  * currency of the logged order
  * @return currency
  **/
  @Schema(description = "currency of the logged order")
  public String getCurrency() {
    return currency;
  }
  public void setCurrency(String currency) {
    this.currency = currency;
  }
  public ModelOrderLog amount(Float amount) {
    this.amount = amount;
    return this;
  }

  

  /**
  * amount of the order position
  * @return amount
  **/
  @Schema(description = "amount of the order position")
  public Float getAmount() {
    return amount;
  }
  public void setAmount(Float amount) {
    this.amount = amount;
  }
  public ModelOrderLog amountType(String amountType) {
    this.amountType = amountType;
    return this;
  }

  

  /**
  * type of the order position amount, can be one from unity or custom
  * @return amountType
  **/
  @Schema(description = "type of the order position amount, can be one from unity or custom")
  public String getAmountType() {
    return amountType;
  }
  public void setAmountType(String amountType) {
    this.amountType = amountType;
  }
  public ModelOrderLog taxRate(Integer taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  

  /**
  * tax rate of the order
  * @return taxRate
  **/
  @Schema(description = "tax rate of the order")
  public Integer getTaxRate() {
    return taxRate;
  }
  public void setTaxRate(Integer taxRate) {
    this.taxRate = taxRate;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelOrderLog modelOrderLog = (ModelOrderLog) o;
    return Objects.equals(this.create, modelOrderLog.create) &&
        Objects.equals(this.update, modelOrderLog.update) &&
        Objects.equals(this.date, modelOrderLog.date) &&
        Objects.equals(this.order, modelOrderLog.order) &&
        Objects.equals(this.object, modelOrderLog.object) &&
        Objects.equals(this.sevClient, modelOrderLog.sevClient) &&
        Objects.equals(this.currency, modelOrderLog.currency) &&
        Objects.equals(this.amount, modelOrderLog.amount) &&
        Objects.equals(this.amountType, modelOrderLog.amountType) &&
        Objects.equals(this.taxRate, modelOrderLog.taxRate);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, date, order, object, sevClient, currency, amount, amountType, taxRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelOrderLog {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    object: ").append(toIndentedString(object)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
