/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.time.OffsetDateTime;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;


/**
 * ModelEmail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")
public class ModelEmail
{

	@JsonProperty("create")

	private OffsetDateTime create = null;

	@JsonProperty("update")

	private OffsetDateTime update = null;

	@JsonProperty("object")

	private ModelInvoice object = null;

	@JsonProperty("from")

	private String from = null;

	@JsonProperty("to")

	private String to = null;

	@JsonProperty("subject")

	private String subject = null;

	@JsonProperty("text")

	private String text = null;

	@JsonProperty("sevClient")

	private Object sevClient = null;

	@JsonProperty("cc")

	private String cc = null;

	@JsonProperty("bcc")

	private String bcc = null;

	@JsonProperty("arrived")

	private OffsetDateTime arrived = null;

	public ModelEmail create(OffsetDateTime create)
	{
		this.create = create;
		return this;
	}



	/**
	 * creation date of the Email
	 *
	 * @return create
	 **/
	@Schema(description = "creation date of the Email")
	public OffsetDateTime getCreate()
	{
		return create;
	}

	public void setCreate(OffsetDateTime create)
	{
		this.create = create;
	}

	public ModelEmail update(OffsetDateTime update)
	{
		this.update = update;
		return this;
	}



	/**
	 * date the email was last updated
	 *
	 * @return update
	 **/
	@Schema(description = "date the email was last updated")
	public OffsetDateTime getUpdate()
	{
		return update;
	}

	public void setUpdate(OffsetDateTime update)
	{
		this.update = update;
	}

	public ModelEmail object(ModelInvoice object)
	{
		this.object = object;
		return this;
	}



	/**
	 * Get object
	 *
	 * @return object
	 **/
	@Schema(description = "")
	public ModelInvoice getObject()
	{
		return object;
	}

	public void setObject(ModelInvoice object)
	{
		this.object = object;
	}

	public ModelEmail from(String from)
	{
		this.from = from;
		return this;
	}



	/**
	 * sender of the email
	 *
	 * @return from
	 **/
	@Schema(description = "sender of the email")
	public String getFrom()
	{
		return from;
	}

	public void setFrom(String from)
	{
		this.from = from;
	}

	public ModelEmail to(String to)
	{
		this.to = to;
		return this;
	}



	/**
	 * recipient of the email
	 *
	 * @return to
	 **/
	@Schema(description = "recipient of the email")
	public String getTo()
	{
		return to;
	}

	public void setTo(String to)
	{
		this.to = to;
	}

	public ModelEmail subject(String subject)
	{
		this.subject = subject;
		return this;
	}



	/**
	 * subject of the email
	 *
	 * @return subject
	 **/
	@Schema(description = "subject of the email")
	public String getSubject()
	{
		return subject;
	}

	public void setSubject(String subject)
	{
		this.subject = subject;
	}

	public ModelEmail text(String text)
	{
		this.text = text;
		return this;
	}



	/**
	 * text written in the email
	 *
	 * @return text
	 **/
	@Schema(description = "text written in the email")
	public String getText()
	{
		return text;
	}

	public void setText(String text)
	{
		this.text = text;
	}

	public ModelEmail sevClient(Object sevClient)
	{
		this.sevClient = sevClient;
		return this;
	}



	/**
	 * sevClient is the unique id every customer has and is used in nearly all operations
	 *
	 * @return sevClient
	 **/
	@Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
	public Object getSevClient()
	{
		return sevClient;
	}

	public void setSevClient(Object sevClient)
	{
		this.sevClient = sevClient;
	}

	public ModelEmail cc(String cc)
	{
		this.cc = cc;
		return this;
	}



	/**
	 * cc of the email
	 *
	 * @return cc
	 **/
	@Schema(description = "cc of the email")
	public String getCc()
	{
		return cc;
	}

	public void setCc(String cc)
	{
		this.cc = cc;
	}

	public ModelEmail bcc(String bcc)
	{
		this.bcc = bcc;
		return this;
	}



	/**
	 * bcc of the email
	 *
	 * @return bcc
	 **/
	@Schema(description = "bcc of the email")
	public String getBcc()
	{
		return bcc;
	}

	public void setBcc(String bcc)
	{
		this.bcc = bcc;
	}

	public ModelEmail arrived(OffsetDateTime arrived)
	{
		this.arrived = arrived;
		return this;
	}



	/**
	 * arrival date of the email
	 *
	 * @return arrived
	 **/
	@Schema(description = "arrival date of the email")
	public OffsetDateTime getArrived()
	{
		return arrived;
	}

	public void setArrived(OffsetDateTime arrived)
	{
		this.arrived = arrived;
	}

	@Override
	public boolean equals(java.lang.Object o)
	{
		if (this == o)
		{
			return true;
		}
		if (o == null || getClass() != o.getClass())
		{
			return false;
		}
		ModelEmail modelEmail = (ModelEmail) o;
		return Objects.equals(this.create, modelEmail.create) &&
				Objects.equals(this.update, modelEmail.update) &&
				Objects.equals(this.object, modelEmail.object) &&
				Objects.equals(this.from, modelEmail.from) &&
				Objects.equals(this.to, modelEmail.to) &&
				Objects.equals(this.subject, modelEmail.subject) &&
				Objects.equals(this.text, modelEmail.text) &&
				Objects.equals(this.sevClient, modelEmail.sevClient) &&
				Objects.equals(this.cc, modelEmail.cc) &&
				Objects.equals(this.bcc, modelEmail.bcc) &&
				Objects.equals(this.arrived, modelEmail.arrived);
	}

	@Override
	public int hashCode()
	{
		return java.util.Objects.hash(create, update, object, from, to, subject, text, sevClient, cc, bcc, arrived);
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		sb.append("class ModelEmail {\n");

		sb.append("    create: ").append(toIndentedString(create)).append("\n");
		sb.append("    update: ").append(toIndentedString(update)).append("\n");
		sb.append("    object: ").append(toIndentedString(object)).append("\n");
		sb.append("    from: ").append(toIndentedString(from)).append("\n");
		sb.append("    to: ").append(toIndentedString(to)).append("\n");
		sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
		sb.append("    text: ").append(toIndentedString(text)).append("\n");
		sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
		sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
		sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
		sb.append("    arrived: ").append(toIndentedString(arrived)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o)
	{
		if (o == null)
		{
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
