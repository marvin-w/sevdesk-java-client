/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelAccountingType;
import de.wichmann.sevdesk.model.ModelVoucherPos;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelAsset
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:13:41.764+02:00[Europe/Berlin]")public class ModelAsset {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("voucherPos")

  private ModelVoucherPos voucherPos = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("usefulLife")

  private Integer usefulLife = null;

  @JsonProperty("acquisitionDate")

  private OffsetDateTime acquisitionDate = null;

  @JsonProperty("purchasePrice")

  private Float purchasePrice = null;

  @JsonProperty("purchasePriceAccounting")

  private Float purchasePriceAccounting = null;

  @JsonProperty("taxRate")

  private Float taxRate = null;

  @JsonProperty("assetNumber")

  private String assetNumber = null;

  @JsonProperty("accountingType")

  private ModelAccountingType accountingType = null;

  @JsonProperty("status")

  private Integer status = null;

  @JsonProperty("enshrined")

  private Boolean enshrined = null;
  public ModelAsset create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the asset was created
  * @return create
  **/
  @Schema(description = "date the asset was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelAsset update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the asset was last updated
  * @return update
  **/
  @Schema(description = "date the asset was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelAsset voucherPos(ModelVoucherPos voucherPos) {
    this.voucherPos = voucherPos;
    return this;
  }

  

  /**
  * Get voucherPos
  * @return voucherPos
  **/
  @Schema(description = "")
  public ModelVoucherPos getVoucherPos() {
    return voucherPos;
  }
  public void setVoucherPos(ModelVoucherPos voucherPos) {
    this.voucherPos = voucherPos;
  }
  public ModelAsset name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelAsset sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelAsset usefulLife(Integer usefulLife) {
    this.usefulLife = usefulLife;
    return this;
  }

  

  /**
  * lifespan of the asset
  * @return usefulLife
  **/
  @Schema(description = "lifespan of the asset")
  public Integer getUsefulLife() {
    return usefulLife;
  }
  public void setUsefulLife(Integer usefulLife) {
    this.usefulLife = usefulLife;
  }
  public ModelAsset acquisitionDate(OffsetDateTime acquisitionDate) {
    this.acquisitionDate = acquisitionDate;
    return this;
  }

  

  /**
  * date the asset was acquired
  * @return acquisitionDate
  **/
  @Schema(description = "date the asset was acquired")
  public OffsetDateTime getAcquisitionDate() {
    return acquisitionDate;
  }
  public void setAcquisitionDate(OffsetDateTime acquisitionDate) {
    this.acquisitionDate = acquisitionDate;
  }
  public ModelAsset purchasePrice(Float purchasePrice) {
    this.purchasePrice = purchasePrice;
    return this;
  }

  

  /**
  * Get purchasePrice
  * @return purchasePrice
  **/
  @Schema(description = "")
  public Float getPurchasePrice() {
    return purchasePrice;
  }
  public void setPurchasePrice(Float purchasePrice) {
    this.purchasePrice = purchasePrice;
  }
  public ModelAsset purchasePriceAccounting(Float purchasePriceAccounting) {
    this.purchasePriceAccounting = purchasePriceAccounting;
    return this;
  }

  

  /**
  * Get purchasePriceAccounting
  * @return purchasePriceAccounting
  **/
  @Schema(description = "")
  public Float getPurchasePriceAccounting() {
    return purchasePriceAccounting;
  }
  public void setPurchasePriceAccounting(Float purchasePriceAccounting) {
    this.purchasePriceAccounting = purchasePriceAccounting;
  }
  public ModelAsset taxRate(Float taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  

  /**
  * Get taxRate
  * @return taxRate
  **/
  @Schema(description = "")
  public Float getTaxRate() {
    return taxRate;
  }
  public void setTaxRate(Float taxRate) {
    this.taxRate = taxRate;
  }
  public ModelAsset assetNumber(String assetNumber) {
    this.assetNumber = assetNumber;
    return this;
  }

  

  /**
  * Get assetNumber
  * @return assetNumber
  **/
  @Schema(description = "")
  public String getAssetNumber() {
    return assetNumber;
  }
  public void setAssetNumber(String assetNumber) {
    this.assetNumber = assetNumber;
  }
  public ModelAsset accountingType(ModelAccountingType accountingType) {
    this.accountingType = accountingType;
    return this;
  }

  

  /**
  * Get accountingType
  * @return accountingType
  **/
  @Schema(description = "")
  public ModelAccountingType getAccountingType() {
    return accountingType;
  }
  public void setAccountingType(ModelAccountingType accountingType) {
    this.accountingType = accountingType;
  }
  public ModelAsset status(Integer status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }
  public void setStatus(Integer status) {
    this.status = status;
  }
  public ModelAsset enshrined(Boolean enshrined) {
    this.enshrined = enshrined;
    return this;
  }

  

  /**
  * Get enshrined
  * @return enshrined
  **/
  @Schema(description = "")
  public Boolean isEnshrined() {
    return enshrined;
  }
  public void setEnshrined(Boolean enshrined) {
    this.enshrined = enshrined;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelAsset modelAsset = (ModelAsset) o;
    return Objects.equals(this.create, modelAsset.create) &&
        Objects.equals(this.update, modelAsset.update) &&
        Objects.equals(this.voucherPos, modelAsset.voucherPos) &&
        Objects.equals(this.name, modelAsset.name) &&
        Objects.equals(this.sevClient, modelAsset.sevClient) &&
        Objects.equals(this.usefulLife, modelAsset.usefulLife) &&
        Objects.equals(this.acquisitionDate, modelAsset.acquisitionDate) &&
        Objects.equals(this.purchasePrice, modelAsset.purchasePrice) &&
        Objects.equals(this.purchasePriceAccounting, modelAsset.purchasePriceAccounting) &&
        Objects.equals(this.taxRate, modelAsset.taxRate) &&
        Objects.equals(this.assetNumber, modelAsset.assetNumber) &&
        Objects.equals(this.accountingType, modelAsset.accountingType) &&
        Objects.equals(this.status, modelAsset.status) &&
        Objects.equals(this.enshrined, modelAsset.enshrined);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, voucherPos, name, sevClient, usefulLife, acquisitionDate, purchasePrice, purchasePriceAccounting, taxRate, assetNumber, accountingType, status, enshrined);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelAsset {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    voucherPos: ").append(toIndentedString(voucherPos)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    usefulLife: ").append(toIndentedString(usefulLife)).append("\n");
    sb.append("    acquisitionDate: ").append(toIndentedString(acquisitionDate)).append("\n");
    sb.append("    purchasePrice: ").append(toIndentedString(purchasePrice)).append("\n");
    sb.append("    purchasePriceAccounting: ").append(toIndentedString(purchasePriceAccounting)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    assetNumber: ").append(toIndentedString(assetNumber)).append("\n");
    sb.append("    accountingType: ").append(toIndentedString(accountingType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    enshrined: ").append(toIndentedString(enshrined)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
