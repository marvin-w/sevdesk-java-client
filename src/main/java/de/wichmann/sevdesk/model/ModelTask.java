/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelCategory;
import de.wichmann.sevdesk.model.ModelSevUser;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelTask
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelTask {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("assigned")

  private ModelSevUser assigned = null;

  @JsonProperty("object")

  private Object object = null;

  @JsonProperty("deadline")

  private OffsetDateTime deadline = null;

  @JsonProperty("status")

  private Integer status = null;

  @JsonProperty("category")

  private ModelCategory category = null;

  @JsonProperty("done")

  private OffsetDateTime done = null;

  @JsonProperty("createUser")

  private ModelSevUser createUser = null;

  @JsonProperty("doneUser")

  private ModelSevUser doneUser = null;

  @JsonProperty("noticeCreator")

  private Boolean noticeCreator = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("begin")

  private OffsetDateTime begin = null;
  public ModelTask create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * the date the task was created
  * @return create
  **/
  @Schema(description = "the date the task was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelTask update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the task was last updated
  * @return update
  **/
  @Schema(description = "date the task was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelTask name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelTask assigned(ModelSevUser assigned) {
    this.assigned = assigned;
    return this;
  }

  

  /**
  * Get assigned
  * @return assigned
  **/
  @Schema(description = "")
  public ModelSevUser getAssigned() {
    return assigned;
  }
  public void setAssigned(ModelSevUser assigned) {
    this.assigned = assigned;
  }
  public ModelTask object(Object object) {
    this.object = object;
    return this;
  }

  

  /**
  * can be a contact, invoice, etc to which the task refers to
  * @return object
  **/
  @Schema(description = "can be a contact, invoice, etc to which the task refers to")
  public Object getObject() {
    return object;
  }
  public void setObject(Object object) {
    this.object = object;
  }
  public ModelTask deadline(OffsetDateTime deadline) {
    this.deadline = deadline;
    return this;
  }

  

  /**
  * Get deadline
  * @return deadline
  **/
  @Schema(description = "")
  public OffsetDateTime getDeadline() {
    return deadline;
  }
  public void setDeadline(OffsetDateTime deadline) {
    this.deadline = deadline;
  }
  public ModelTask status(Integer status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }
  public void setStatus(Integer status) {
    this.status = status;
  }
  public ModelTask category(ModelCategory category) {
    this.category = category;
    return this;
  }

  

  /**
  * Get category
  * @return category
  **/
  @Schema(description = "")
  public ModelCategory getCategory() {
    return category;
  }
  public void setCategory(ModelCategory category) {
    this.category = category;
  }
  public ModelTask done(OffsetDateTime done) {
    this.done = done;
    return this;
  }

  

  /**
  * Get done
  * @return done
  **/
  @Schema(description = "")
  public OffsetDateTime getDone() {
    return done;
  }
  public void setDone(OffsetDateTime done) {
    this.done = done;
  }
  public ModelTask createUser(ModelSevUser createUser) {
    this.createUser = createUser;
    return this;
  }

  

  /**
  * Get createUser
  * @return createUser
  **/
  @Schema(description = "")
  public ModelSevUser getCreateUser() {
    return createUser;
  }
  public void setCreateUser(ModelSevUser createUser) {
    this.createUser = createUser;
  }
  public ModelTask doneUser(ModelSevUser doneUser) {
    this.doneUser = doneUser;
    return this;
  }

  

  /**
  * Get doneUser
  * @return doneUser
  **/
  @Schema(description = "")
  public ModelSevUser getDoneUser() {
    return doneUser;
  }
  public void setDoneUser(ModelSevUser doneUser) {
    this.doneUser = doneUser;
  }
  public ModelTask noticeCreator(Boolean noticeCreator) {
    this.noticeCreator = noticeCreator;
    return this;
  }

  

  /**
  * notice the creator when the task is finished
  * @return noticeCreator
  **/
  @Schema(description = "notice the creator when the task is finished")
  public Boolean isNoticeCreator() {
    return noticeCreator;
  }
  public void setNoticeCreator(Boolean noticeCreator) {
    this.noticeCreator = noticeCreator;
  }
  public ModelTask sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelTask begin(OffsetDateTime begin) {
    this.begin = begin;
    return this;
  }

  

  /**
  * Get begin
  * @return begin
  **/
  @Schema(description = "")
  public OffsetDateTime getBegin() {
    return begin;
  }
  public void setBegin(OffsetDateTime begin) {
    this.begin = begin;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelTask modelTask = (ModelTask) o;
    return Objects.equals(this.create, modelTask.create) &&
        Objects.equals(this.update, modelTask.update) &&
        Objects.equals(this.name, modelTask.name) &&
        Objects.equals(this.assigned, modelTask.assigned) &&
        Objects.equals(this.object, modelTask.object) &&
        Objects.equals(this.deadline, modelTask.deadline) &&
        Objects.equals(this.status, modelTask.status) &&
        Objects.equals(this.category, modelTask.category) &&
        Objects.equals(this.done, modelTask.done) &&
        Objects.equals(this.createUser, modelTask.createUser) &&
        Objects.equals(this.doneUser, modelTask.doneUser) &&
        Objects.equals(this.noticeCreator, modelTask.noticeCreator) &&
        Objects.equals(this.sevClient, modelTask.sevClient) &&
        Objects.equals(this.begin, modelTask.begin);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, name, assigned, object, deadline, status, category, done, createUser, doneUser, noticeCreator, sevClient, begin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelTask {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    assigned: ").append(toIndentedString(assigned)).append("\n");
    sb.append("    object: ").append(toIndentedString(object)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    done: ").append(toIndentedString(done)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    doneUser: ").append(toIndentedString(doneUser)).append("\n");
    sb.append("    noticeCreator: ").append(toIndentedString(noticeCreator)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    begin: ").append(toIndentedString(begin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
