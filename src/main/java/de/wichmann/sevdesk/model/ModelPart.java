/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelAccountingType;
import de.wichmann.sevdesk.model.ModelCategory;
import de.wichmann.sevdesk.model.ModelEntryType;
import de.wichmann.sevdesk.model.ModelPart;
import de.wichmann.sevdesk.model.ModelUnity;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelPart
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:58:42.052+02:00[Europe/Berlin]")public class ModelPart {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("update")

  private OffsetDateTime update = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("partNumber")

  private String partNumber = null;

  @JsonProperty("text")

  private String text = null;

  @JsonProperty("category")

  private ModelCategory category = null;

  @JsonProperty("stock")

  private Float stock = null;

  @JsonProperty("unity")

  private ModelUnity unity = null;

  @JsonProperty("pricePartner")

  private Float pricePartner = null;

  @JsonProperty("priceCustomer")

  private Float priceCustomer = null;

  @JsonProperty("price")

  private Float price = null;

  @JsonProperty("secondUnity")

  private ModelUnity secondUnity = null;

  @JsonProperty("secondUnityFactor")

  private Float secondUnityFactor = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("pricePurchase")

  private Float pricePurchase = null;

  @JsonProperty("taxRate")

  private Float taxRate = null;

  @JsonProperty("image")

  private String image = null;

  @JsonProperty("status")

  private Integer status = null;

  @JsonProperty("characteristics")

  private String characteristics = null;

  @JsonProperty("origin")

  private ModelPart origin = null;

  @JsonProperty("characteristicsString")

  private String characteristicsString = null;

  @JsonProperty("internalComment")

  private String internalComment = null;

  @JsonProperty("entryType")

  private ModelEntryType entryType = null;

  @JsonProperty("accountingType")

  private ModelAccountingType accountingType = null;

  @JsonProperty("priceNet")

  private Float priceNet = null;

  @JsonProperty("priceGross")

  private Float priceGross = null;
  public ModelPart create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the part was created
  * @return create
  **/
  @Schema(description = "date the part was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelPart update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

  

  /**
  * date the part was last updated
  * @return update
  **/
  @Schema(description = "date the part was last updated")
  public OffsetDateTime getUpdate() {
    return update;
  }
  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }
  public ModelPart name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * name of the part
  * @return name
  **/
  @Schema(description = "name of the part")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelPart partNumber(String partNumber) {
    this.partNumber = partNumber;
    return this;
  }

  

  /**
  * Get partNumber
  * @return partNumber
  **/
  @Schema(description = "")
  public String getPartNumber() {
    return partNumber;
  }
  public void setPartNumber(String partNumber) {
    this.partNumber = partNumber;
  }
  public ModelPart text(String text) {
    this.text = text;
    return this;
  }

  

  /**
  * Get text
  * @return text
  **/
  @Schema(description = "")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }
  public ModelPart category(ModelCategory category) {
    this.category = category;
    return this;
  }

  

  /**
  * Get category
  * @return category
  **/
  @Schema(description = "")
  public ModelCategory getCategory() {
    return category;
  }
  public void setCategory(ModelCategory category) {
    this.category = category;
  }
  public ModelPart stock(Float stock) {
    this.stock = stock;
    return this;
  }

  

  /**
  * Get stock
  * @return stock
  **/
  @Schema(description = "")
  public Float getStock() {
    return stock;
  }
  public void setStock(Float stock) {
    this.stock = stock;
  }
  public ModelPart unity(ModelUnity unity) {
    this.unity = unity;
    return this;
  }

  

  /**
  * Get unity
  * @return unity
  **/
  @Schema(description = "")
  public ModelUnity getUnity() {
    return unity;
  }
  public void setUnity(ModelUnity unity) {
    this.unity = unity;
  }
  public ModelPart pricePartner(Float pricePartner) {
    this.pricePartner = pricePartner;
    return this;
  }

  

  /**
  * price for a partner. Can be added via the options in the inventory where the part is displayed
  * @return pricePartner
  **/
  @Schema(description = "price for a partner. Can be added via the options in the inventory where the part is displayed")
  public Float getPricePartner() {
    return pricePartner;
  }
  public void setPricePartner(Float pricePartner) {
    this.pricePartner = pricePartner;
  }
  public ModelPart priceCustomer(Float priceCustomer) {
    this.priceCustomer = priceCustomer;
    return this;
  }

  

  /**
  * price for a customer. Can be added via the options in the inventory where the part is displayed
  * @return priceCustomer
  **/
  @Schema(description = "price for a customer. Can be added via the options in the inventory where the part is displayed")
  public Float getPriceCustomer() {
    return priceCustomer;
  }
  public void setPriceCustomer(Float priceCustomer) {
    this.priceCustomer = priceCustomer;
  }
  public ModelPart price(Float price) {
    this.price = price;
    return this;
  }

  

  /**
  * price of the part
  * @return price
  **/
  @Schema(description = "price of the part")
  public Float getPrice() {
    return price;
  }
  public void setPrice(Float price) {
    this.price = price;
  }
  public ModelPart secondUnity(ModelUnity secondUnity) {
    this.secondUnity = secondUnity;
    return this;
  }

  

  /**
  * Get secondUnity
  * @return secondUnity
  **/
  @Schema(description = "")
  public ModelUnity getSecondUnity() {
    return secondUnity;
  }
  public void setSecondUnity(ModelUnity secondUnity) {
    this.secondUnity = secondUnity;
  }
  public ModelPart secondUnityFactor(Float secondUnityFactor) {
    this.secondUnityFactor = secondUnityFactor;
    return this;
  }

  

  /**
  * factor for the second unity resulting in a new sumNet for the secondUnity
  * @return secondUnityFactor
  **/
  @Schema(description = "factor for the second unity resulting in a new sumNet for the secondUnity")
  public Float getSecondUnityFactor() {
    return secondUnityFactor;
  }
  public void setSecondUnityFactor(Float secondUnityFactor) {
    this.secondUnityFactor = secondUnityFactor;
  }
  public ModelPart sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelPart pricePurchase(Float pricePurchase) {
    this.pricePurchase = pricePurchase;
    return this;
  }

  

  /**
  * Get pricePurchase
  * @return pricePurchase
  **/
  @Schema(description = "")
  public Float getPricePurchase() {
    return pricePurchase;
  }
  public void setPricePurchase(Float pricePurchase) {
    this.pricePurchase = pricePurchase;
  }
  public ModelPart taxRate(Float taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  

  /**
  * Get taxRate
  * @return taxRate
  **/
  @Schema(description = "")
  public Float getTaxRate() {
    return taxRate;
  }
  public void setTaxRate(Float taxRate) {
    this.taxRate = taxRate;
  }
  public ModelPart image(String image) {
    this.image = image;
    return this;
  }

  

  /**
  * Get image
  * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }
  public void setImage(String image) {
    this.image = image;
  }
  public ModelPart status(Integer status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }
  public void setStatus(Integer status) {
    this.status = status;
  }
  public ModelPart characteristics(String characteristics) {
    this.characteristics = characteristics;
    return this;
  }

  

  /**
  * characteristics of the part
  * @return characteristics
  **/
  @Schema(description = "characteristics of the part")
  public String getCharacteristics() {
    return characteristics;
  }
  public void setCharacteristics(String characteristics) {
    this.characteristics = characteristics;
  }
  public ModelPart origin(ModelPart origin) {
    this.origin = origin;
    return this;
  }

  

  /**
  * Get origin
  * @return origin
  **/
  @Schema(description = "")
  public ModelPart getOrigin() {
    return origin;
  }
  public void setOrigin(ModelPart origin) {
    this.origin = origin;
  }
  public ModelPart characteristicsString(String characteristicsString) {
    this.characteristicsString = characteristicsString;
    return this;
  }

  

  /**
  * Get characteristicsString
  * @return characteristicsString
  **/
  @Schema(description = "")
  public String getCharacteristicsString() {
    return characteristicsString;
  }
  public void setCharacteristicsString(String characteristicsString) {
    this.characteristicsString = characteristicsString;
  }
  public ModelPart internalComment(String internalComment) {
    this.internalComment = internalComment;
    return this;
  }

  

  /**
  * Get internalComment
  * @return internalComment
  **/
  @Schema(description = "")
  public String getInternalComment() {
    return internalComment;
  }
  public void setInternalComment(String internalComment) {
    this.internalComment = internalComment;
  }
  public ModelPart entryType(ModelEntryType entryType) {
    this.entryType = entryType;
    return this;
  }

  

  /**
  * Get entryType
  * @return entryType
  **/
  @Schema(description = "")
  public ModelEntryType getEntryType() {
    return entryType;
  }
  public void setEntryType(ModelEntryType entryType) {
    this.entryType = entryType;
  }
  public ModelPart accountingType(ModelAccountingType accountingType) {
    this.accountingType = accountingType;
    return this;
  }

  

  /**
  * Get accountingType
  * @return accountingType
  **/
  @Schema(description = "")
  public ModelAccountingType getAccountingType() {
    return accountingType;
  }
  public void setAccountingType(ModelAccountingType accountingType) {
    this.accountingType = accountingType;
  }
  public ModelPart priceNet(Float priceNet) {
    this.priceNet = priceNet;
    return this;
  }

  

  /**
  * Get priceNet
  * @return priceNet
  **/
  @Schema(description = "")
  public Float getPriceNet() {
    return priceNet;
  }
  public void setPriceNet(Float priceNet) {
    this.priceNet = priceNet;
  }
  public ModelPart priceGross(Float priceGross) {
    this.priceGross = priceGross;
    return this;
  }

  

  /**
  * Get priceGross
  * @return priceGross
  **/
  @Schema(description = "")
  public Float getPriceGross() {
    return priceGross;
  }
  public void setPriceGross(Float priceGross) {
    this.priceGross = priceGross;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPart modelPart = (ModelPart) o;
    return Objects.equals(this.create, modelPart.create) &&
        Objects.equals(this.update, modelPart.update) &&
        Objects.equals(this.name, modelPart.name) &&
        Objects.equals(this.partNumber, modelPart.partNumber) &&
        Objects.equals(this.text, modelPart.text) &&
        Objects.equals(this.category, modelPart.category) &&
        Objects.equals(this.stock, modelPart.stock) &&
        Objects.equals(this.unity, modelPart.unity) &&
        Objects.equals(this.pricePartner, modelPart.pricePartner) &&
        Objects.equals(this.priceCustomer, modelPart.priceCustomer) &&
        Objects.equals(this.price, modelPart.price) &&
        Objects.equals(this.secondUnity, modelPart.secondUnity) &&
        Objects.equals(this.secondUnityFactor, modelPart.secondUnityFactor) &&
        Objects.equals(this.sevClient, modelPart.sevClient) &&
        Objects.equals(this.pricePurchase, modelPart.pricePurchase) &&
        Objects.equals(this.taxRate, modelPart.taxRate) &&
        Objects.equals(this.image, modelPart.image) &&
        Objects.equals(this.status, modelPart.status) &&
        Objects.equals(this.characteristics, modelPart.characteristics) &&
        Objects.equals(this.origin, modelPart.origin) &&
        Objects.equals(this.characteristicsString, modelPart.characteristicsString) &&
        Objects.equals(this.internalComment, modelPart.internalComment) &&
        Objects.equals(this.entryType, modelPart.entryType) &&
        Objects.equals(this.accountingType, modelPart.accountingType) &&
        Objects.equals(this.priceNet, modelPart.priceNet) &&
        Objects.equals(this.priceGross, modelPart.priceGross);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, update, name, partNumber, text, category, stock, unity, pricePartner, priceCustomer, price, secondUnity, secondUnityFactor, sevClient, pricePurchase, taxRate, image, status, characteristics, origin, characteristicsString, internalComment, entryType, accountingType, priceNet, priceGross);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPart {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    unity: ").append(toIndentedString(unity)).append("\n");
    sb.append("    pricePartner: ").append(toIndentedString(pricePartner)).append("\n");
    sb.append("    priceCustomer: ").append(toIndentedString(priceCustomer)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    secondUnity: ").append(toIndentedString(secondUnity)).append("\n");
    sb.append("    secondUnityFactor: ").append(toIndentedString(secondUnityFactor)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    pricePurchase: ").append(toIndentedString(pricePurchase)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    characteristics: ").append(toIndentedString(characteristics)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    characteristicsString: ").append(toIndentedString(characteristicsString)).append("\n");
    sb.append("    internalComment: ").append(toIndentedString(internalComment)).append("\n");
    sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
    sb.append("    accountingType: ").append(toIndentedString(accountingType)).append("\n");
    sb.append("    priceNet: ").append(toIndentedString(priceNet)).append("\n");
    sb.append("    priceGross: ").append(toIndentedString(priceGross)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
