/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.wichmann.sevdesk.model.ModelCheckAccountTransaction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * ModelCheckAccountTransactionLog
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:13:41.764+02:00[Europe/Berlin]")public class ModelCheckAccountTransactionLog {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("checkAccountTransaction")

  private ModelCheckAccountTransaction checkAccountTransaction = null;

  @JsonProperty("fromStatus")

  private Integer fromStatus = null;

  @JsonProperty("toStatus")

  private Integer toStatus = null;

  @JsonProperty("amountPaid")

  private Float amountPaid = null;

  @JsonProperty("bookingDate")

  private OffsetDateTime bookingDate = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("object")

  private Object object = null;
  public ModelCheckAccountTransactionLog create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * date the check account transaction log was created
  * @return create
  **/
  @Schema(description = "date the check account transaction log was created")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelCheckAccountTransactionLog checkAccountTransaction(ModelCheckAccountTransaction checkAccountTransaction) {
    this.checkAccountTransaction = checkAccountTransaction;
    return this;
  }

  

  /**
  * Get checkAccountTransaction
  * @return checkAccountTransaction
  **/
  @Schema(description = "")
  public ModelCheckAccountTransaction getCheckAccountTransaction() {
    return checkAccountTransaction;
  }
  public void setCheckAccountTransaction(ModelCheckAccountTransaction checkAccountTransaction) {
    this.checkAccountTransaction = checkAccountTransaction;
  }
  public ModelCheckAccountTransactionLog fromStatus(Integer fromStatus) {
    this.fromStatus = fromStatus;
    return this;
  }

  

  /**
  * the status before the logged change
  * @return fromStatus
  **/
  @Schema(description = "the status before the logged change")
  public Integer getFromStatus() {
    return fromStatus;
  }
  public void setFromStatus(Integer fromStatus) {
    this.fromStatus = fromStatus;
  }
  public ModelCheckAccountTransactionLog toStatus(Integer toStatus) {
    this.toStatus = toStatus;
    return this;
  }

  

  /**
  * the status after the logged change
  * @return toStatus
  **/
  @Schema(description = "the status after the logged change")
  public Integer getToStatus() {
    return toStatus;
  }
  public void setToStatus(Integer toStatus) {
    this.toStatus = toStatus;
  }
  public ModelCheckAccountTransactionLog amountPaid(Float amountPaid) {
    this.amountPaid = amountPaid;
    return this;
  }

  

  /**
  * the logged amount which was paid
  * @return amountPaid
  **/
  @Schema(description = "the logged amount which was paid")
  public Float getAmountPaid() {
    return amountPaid;
  }
  public void setAmountPaid(Float amountPaid) {
    this.amountPaid = amountPaid;
  }
  public ModelCheckAccountTransactionLog bookingDate(OffsetDateTime bookingDate) {
    this.bookingDate = bookingDate;
    return this;
  }

  

  /**
  * Get bookingDate
  * @return bookingDate
  **/
  @Schema(description = "")
  public OffsetDateTime getBookingDate() {
    return bookingDate;
  }
  public void setBookingDate(OffsetDateTime bookingDate) {
    this.bookingDate = bookingDate;
  }
  public ModelCheckAccountTransactionLog sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelCheckAccountTransactionLog object(Object object) {
    this.object = object;
    return this;
  }

  

  /**
  * Invoice/Voucher to which the logged transaction belongs
  * @return object
  **/
  @Schema(description = "Invoice/Voucher to which the logged transaction belongs")
  public Object getObject() {
    return object;
  }
  public void setObject(Object object) {
    this.object = object;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelCheckAccountTransactionLog modelCheckAccountTransactionLog = (ModelCheckAccountTransactionLog) o;
    return Objects.equals(this.create, modelCheckAccountTransactionLog.create) &&
        Objects.equals(this.checkAccountTransaction, modelCheckAccountTransactionLog.checkAccountTransaction) &&
        Objects.equals(this.fromStatus, modelCheckAccountTransactionLog.fromStatus) &&
        Objects.equals(this.toStatus, modelCheckAccountTransactionLog.toStatus) &&
        Objects.equals(this.amountPaid, modelCheckAccountTransactionLog.amountPaid) &&
        Objects.equals(this.bookingDate, modelCheckAccountTransactionLog.bookingDate) &&
        Objects.equals(this.sevClient, modelCheckAccountTransactionLog.sevClient) &&
        Objects.equals(this.object, modelCheckAccountTransactionLog.object);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, checkAccountTransaction, fromStatus, toStatus, amountPaid, bookingDate, sevClient, object);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelCheckAccountTransactionLog {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    checkAccountTransaction: ").append(toIndentedString(checkAccountTransaction)).append("\n");
    sb.append("    fromStatus: ").append(toIndentedString(fromStatus)).append("\n");
    sb.append("    toStatus: ").append(toIndentedString(toStatus)).append("\n");
    sb.append("    amountPaid: ").append(toIndentedString(amountPaid)).append("\n");
    sb.append("    bookingDate: ").append(toIndentedString(bookingDate)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    object: ").append(toIndentedString(object)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
