/*
 * sevDesk
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.wichmann.sevdesk.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;

/**
 * The inventory part log contains all part bookings (acquisition/dispatch)
 */
@Schema(description = "The inventory part log contains all part bookings (acquisition/dispatch)")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-26T00:13:41.764+02:00[Europe/Berlin]")public class ModelInventoryPartLog {

  @JsonProperty("create")

  private OffsetDateTime create = null;

  @JsonProperty("postingDate")

  private OffsetDateTime postingDate = null;

  @JsonProperty("part")

  private Object part = null;

  @JsonProperty("supplier")

  private Object supplier = null;

  @JsonProperty("ammount")

  private Float ammount = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("sevClient")

  private Object sevClient = null;

  @JsonProperty("object")

  private Object object = null;
  public ModelInventoryPartLog create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

  

  /**
  * creation date of the inventory part log
  * @return create
  **/
  @Schema(description = "creation date of the inventory part log")
  public OffsetDateTime getCreate() {
    return create;
  }
  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }
  public ModelInventoryPartLog postingDate(OffsetDateTime postingDate) {
    this.postingDate = postingDate;
    return this;
  }

  

  /**
  * Get postingDate
  * @return postingDate
  **/
  @Schema(description = "")
  public OffsetDateTime getPostingDate() {
    return postingDate;
  }
  public void setPostingDate(OffsetDateTime postingDate) {
    this.postingDate = postingDate;
  }
  public ModelInventoryPartLog part(Object part) {
    this.part = part;
    return this;
  }

  

  /**
  * part which is involved in the part booking which is logged
  * @return part
  **/
  @Schema(description = "part which is involved in the part booking which is logged")
  public Object getPart() {
    return part;
  }
  public void setPart(Object part) {
    this.part = part;
  }
  public ModelInventoryPartLog supplier(Object supplier) {
    this.supplier = supplier;
    return this;
  }

  

  /**
  * supplier which is involved in the part booking which is logged
  * @return supplier
  **/
  @Schema(description = "supplier which is involved in the part booking which is logged")
  public Object getSupplier() {
    return supplier;
  }
  public void setSupplier(Object supplier) {
    this.supplier = supplier;
  }
  public ModelInventoryPartLog ammount(Float ammount) {
    this.ammount = ammount;
    return this;
  }

  

  /**
  * amount booked which is logged
  * @return ammount
  **/
  @Schema(description = "amount booked which is logged")
  public Float getAmmount() {
    return ammount;
  }
  public void setAmmount(Float ammount) {
    this.ammount = ammount;
  }
  public ModelInventoryPartLog name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * description of the booking which is logged
  * @return name
  **/
  @Schema(description = "description of the booking which is logged")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ModelInventoryPartLog sevClient(Object sevClient) {
    this.sevClient = sevClient;
    return this;
  }

  

  /**
  * sevClient is the unique id every customer has and is used in nearly all operations
  * @return sevClient
  **/
  @Schema(description = "sevClient is the unique id every customer has and is used in nearly all operations")
  public Object getSevClient() {
    return sevClient;
  }
  public void setSevClient(Object sevClient) {
    this.sevClient = sevClient;
  }
  public ModelInventoryPartLog object(Object object) {
    this.object = object;
    return this;
  }

  

  /**
  * Get object
  * @return object
  **/
  @Schema(description = "")
  public Object getObject() {
    return object;
  }
  public void setObject(Object object) {
    this.object = object;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelInventoryPartLog modelInventoryPartLog = (ModelInventoryPartLog) o;
    return Objects.equals(this.create, modelInventoryPartLog.create) &&
        Objects.equals(this.postingDate, modelInventoryPartLog.postingDate) &&
        Objects.equals(this.part, modelInventoryPartLog.part) &&
        Objects.equals(this.supplier, modelInventoryPartLog.supplier) &&
        Objects.equals(this.ammount, modelInventoryPartLog.ammount) &&
        Objects.equals(this.name, modelInventoryPartLog.name) &&
        Objects.equals(this.sevClient, modelInventoryPartLog.sevClient) &&
        Objects.equals(this.object, modelInventoryPartLog.object);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(create, postingDate, part, supplier, ammount, name, sevClient, object);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelInventoryPartLog {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    postingDate: ").append(toIndentedString(postingDate)).append("\n");
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("    ammount: ").append(toIndentedString(ammount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sevClient: ").append(toIndentedString(sevClient)).append("\n");
    sb.append("    object: ").append(toIndentedString(object)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
